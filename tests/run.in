#!/bin/bash
## $ReOpenLDAP$
## Copyright 1998-2018 ReOpenLDAP AUTHORS: please see AUTHORS file.
## All rights reserved.
##
## This file is part of ReOpenLDAP.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted only as authorized by the OpenLDAP
## Public License.
##
## A copy of this license is available in the file LICENSE in the
## top-level directory of the distribution or, alternatively, at
## <http://www.OpenLDAP.org/license.html>.

USAGE="$0 [-b <backend>] [-c] [-k] [-l #] [-p] [-s {ro|rp}] [-u] [-w] <script>"

#LY: Doing run-time conversion relative paths to absolute.
#    This allows cross-testing, e.g. to build in one
#    chroot-environment, but going tests in another.
export SRCDIR="$(readlink -f @srcdir@)"
export TOP_SRCDIR="$(readlink -f @top_srcdir@)"
export TOP_BUILDDIR="$(readlink -f @top_builddir@)"
export LN_S="@LN_S@"
export EGREP_CMD="@EGREP@"

#LY: note SLAPD_OVERLAYS_LIST >= SLAPD_OVERLAYS_LIST + SLAPD_STATIC_OVERLAYS
export AC_SLAPD_OVERLAYS_LIST="@SLAPD_OVERLAYS_LIST@"
export AC_SLAPD_DYNAMIC_OVERLAYS="@SLAPD_DYNAMIC_OVERLAYS@"
export AC_SLAPD_STATIC_OVERLAYS="@SLAPD_STATIC_OVERLAYS@"

#LY: note SLAPD_BACKENDS_LIST >= SLAPD_BACKENDS_LIST + SLAPD_BACKENDS_OVERLAYS
export AC_SLAPD_BACKENDS_LIST="@SLAPD_BACKENDS_LIST@"
export AC_SLAPD_DYNAMIC_BACKENDS="@SLAPD_DYNAMIC_BACKENDS@"
export AC_SLAPD_STATIC_BACKENDS="@SLAPD_STATIC_BACKENDS@"

# misc
export AC_WITH_SASL=@WITH_SASL@
export AC_WITH_TLS=@WITH_TLS@
export AC_ACI_ENABLED=@WITH_ACI_ENABLED@
export AC_SLAPD_DYNAMIC_MODULES=@SLAPD_DYNAMIC_MODULES@

#valgrind
export AC_VALGRIND_ENABLED=@VALGRIND_ENABLED@
export AC_VALGRIND=@VALGRIND@
export AC_ENABLE_VALGRIND_drd=@ENABLE_VALGRIND_drd@
export AC_ENABLE_VALGRIND_helgrind=@ENABLE_VALGRIND_helgrind@
export AC_ENABLE_VALGRIND_memcheck=@ENABLE_VALGRIND_memcheck@
export AC_ENABLE_VALGRIND_sgcheck=@ENABLE_VALGRIND_sgcheck@
export AC_VALGRIND_SUPPRESSIONS_FILES="$(readlink -f @srcdir@/@VALGRIND_SUPPRESSIONS_FILES@)"

## sanitize
#if test "${AC_ldap}" = "ldapmod" && test "${AC_LIBS_DYNAMIC}" = "static" ; then
#	AC_ldap="ldapno"
#fi
#if test "${AC_meta}" = "metamod" && test "${AC_LIBS_DYNAMIC}" = "static" ; then
#	AC_meta="metano"
#fi

if test ! -x ${TOP_BUILDDIR}/servers/slapd/slapd ; then
	echo "Could not locate slapd( $TOP_BUILDDIR )"
	exit 1
fi

if test ! -x ${TOP_BUILDDIR}/servers/slapd/.libs/lt-slapd \
    && file -i ${TOP_BUILDDIR}/servers/slapd/slapd | grep -q 'text/x-shellscript'
then
    echo "Kick libtool wrapper for slapd"
    ${TOP_BUILDDIR}/servers/slapd/slapd -VV >/dev/null 2>&1
fi

BACKEND=
CLEAN=no
WAIT=0
KILLSERVERS=yes
PRESERVE=${PRESERVE-no}
SYNCMODE=${SYNCMODE-rp}
USERDATA=no
LOOP=1
COUNTER=1

while test $# -gt 0 ; do
	case "$1" in
		-b | -backend)
			BACKEND="$2"
			shift; shift ;;

		-c | -clean)
			CLEAN=yes
			shift ;;

		-k | -kill)
			KILLSERVERS=no
			shift ;;
		-l | -loop)
			NUM="`echo $2 | sed 's/[0-9]//g'`"
			if [ -z "$NUM" ]; then
				LOOP=$2
			else
				echo "Loop variable not an int: $2"
				echo "$USAGE"; exit 1
			fi
			shift ;
			shift ;;

		-p | -preserve)
			PRESERVE=yes
			shift ;;

		-s | -syncmode)
			case "$2" in
				ro | rp)
					SYNCMODE="$2"
					;;
				*)
					echo "unknown sync mode $2"
					echo "$USAGE"; exit 1
					;;
			esac
			shift; shift ;;

		-u | -userdata)
			USERDATA=yes
			shift ;;

		-w | -wait)
			WAIT=1
			shift ;;

		-)
			shift
			break ;;

		-*)
			echo "$USAGE"; exit 1
			;;

		*)
			break ;;
	esac
done

if test -z "$BACKEND" ; then
	for be in mdb bdb hdb ; do
		if grep -q " $be " <<< " @SLAPD_DYNAMIC_BACKENDS@ @SLAPD_STATIC_BACKENDS@ "; then
			BACKEND=$be
			break
		fi
	done
	if test -z "$BACKEND" ; then
		echo "No suitable default database backend configured" >&2
		exit 1
	fi
fi

if grep -q " $BACKEND " <<< " @SLAPD_DYNAMIC_BACKENDS@ "; then
	BACKENDTYPE="mod"
elif grep -q " $BACKEND " <<< " @SLAPD_STATIC_BACKENDS@ "; then
	BACKENDTYPE="static"
else
	BACKENDTYPE="unknown"
fi

# Backend features.  indexdb: indexing and unchecked limit.
# maindb: main storage backend.  Currently index,limits,mode,paged results.
INDEXDB=noindexdb MAINDB=nomaindb
case $BACKEND in
	mdb|bdb|hdb) INDEXDB=indexdb MAINDB=maindb ;;
	ndb) INDEXDB=indexdb ;;
esac

export	BACKEND BACKENDTYPE INDEXDB MAINDB \
	WAIT KILLSERVERS PRESERVE SYNCMODE USERDATA

if test $# = 0 ; then
	echo "$USAGE"; exit 1
fi

# need defines.sh for the definitions of the directories
. $SRCDIR/scripts/defines.sh || exit 1

SCRIPTDIR="${SRCDIR}/scripts"
ITSDIR="${SRCDIR}/data/regressions"
SCRIPTNAME="$1"
shift

if test -x "${SCRIPTDIR}/${SCRIPTNAME}" ; then
	SCRIPT="${SCRIPTDIR}/${SCRIPTNAME}"
elif test -x "`echo ${SCRIPTDIR}/test*-${SCRIPTNAME}`"; then
	SCRIPT="`echo ${SCRIPTDIR}/test*-${SCRIPTNAME}`"
elif test -x "`echo ${SCRIPTDIR}/${SCRIPTNAME}-*`"; then
	SCRIPT="`echo ${SCRIPTDIR}/${SCRIPTNAME}-*`"
elif test -x "`echo ${SCRIPTDIR}/${SCRIPTNAME}-*`"; then
	SCRIPT="`echo ${SCRIPTDIR}/${SCRIPTNAME}-*`"
elif test -x "`echo ${ITSDIR}/${SCRIPTNAME}/${SCRIPTNAME}`"; then
	SCRIPT="${ITSDIR}/${SCRIPTNAME}/${SCRIPTNAME}"
else
	echo "run: ${SCRIPTNAME} not found (or not executable)"
	exit 1;
fi

if test ! -r ${DATADIR}/test.ldif ; then
	${LN_S} ${SRCDIR}/data ${DATADIR}
fi
if test ! -r ${SCHEMADIR}/core.schema ; then
	${LN_S} ${TOP_SRCDIR}/servers/slapd/schema ${SCHEMADIR}
fi

echo "TESTDIR=$TESTDIR"
if [ -z "$TESTDIR" ]; then
	echo "TESTDIR ?" >&2
	exit 1
fi

if test -d ${TESTDIR} ; then
	if test $PRESERVE = no ; then
		echo "Cleaning up test run directory leftover from previous run."
		find -H ${TESTDIR} -maxdepth 1 -mindepth 1 | xargs rm -rf || exit $?
	elif test $PRESERVE = yes ; then
		echo "Cleaning up only database directories leftover from previous run."
		/bin/rm -rf ${TESTDIR}/db.*
	fi
fi
if test $BACKEND = ndb ; then
	mysql --user root <<EOF
	drop database if exists db_1;
	drop database if exists db_2;
	drop database if exists db_3;
	drop database if exists db_4;
	drop database if exists db_5;
	drop database if exists db_6;
EOF
fi
mkdir -p ${TESTDIR}

if test $USERDATA = yes ; then
	if test ! -d userdata ; then
		echo "User data directory (userdata) does not exist."
		exit 1
	fi
	cp -R userdata/* ${TESTDIR}/
fi

# disable LDAP initialization
LDAPNOINIT=true; export LDAPNOINIT

echo "Running ${SCRIPT} for ${BACKEND}..."
while [ $COUNTER -le $LOOP ]; do
	if [ $LOOP -gt 1 ]; then
		echo "Running $COUNTER of $LOOP iterations"
	fi
	$SCRIPT $*
	RC=$?

	if test $CLEAN = yes ; then
		echo "Cleaning up test run directory from this run."
		find -H ${TESTDIR} -maxdepth 1 -mindepth 1 | xargs rm -rf || exit $?
		echo "Cleaning up symlinks."
		rm -f ${DATADIR} ${SCHEMADIR}
	fi

	if [ $RC -ne 0 ]; then
		if [ $LOOP -gt 1 ]; then
			echo "Failed after $COUNTER of $LOOP iterations"
		fi
		exit $RC
	else
		COUNTER=`expr $COUNTER + 1`
		if [ $COUNTER -le $LOOP ]; then
			echo "Cleaning up test run directory from this run."
			find -H ${TESTDIR} -maxdepth 1 -mindepth 1 | xargs rm -rf || exit $?
		fi
	fi
done
exit $RC
