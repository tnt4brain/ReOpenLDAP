#!/bin/bash
## $ReOpenLDAP$
## Copyright 1998-2018 ReOpenLDAP AUTHORS: please see AUTHORS file.
## All rights reserved.
##
## This file is part of ReOpenLDAP.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted only as authorized by the OpenLDAP
## Public License.
##
## A copy of this license is available in the file LICENSE in the
## top-level directory of the distribution or, alternatively, at
## <http://www.OpenLDAP.org/license.html>.

echo "running defines.sh"
. ${TOP_SRCDIR}/tests/scripts/defines.sh

if test ${AC_conf[syncprov]} = no; then
	echo "Syncrepl provider overlay not available, test skipped"
	exit 0
fi
if test ${AC_conf[accesslog]} = no; then
	echo "Accesslog overlay not available, test skipped"
	exit 0
fi
if test $BACKEND = ldif ; then
	# Onelevel search does not return entries in order of creation or CSN.
	echo "$BACKEND backend unsuitable for syncprov logdb, test skipped"
	exit 0
fi

dtest=`date +%N|sed s/...$//`

if test $dtest = N; then
	echo "nanosecond date values not supported, test skipped"
	exit 0
fi

# This mimics the scenario where a single server has been used until now (no
# syncprov either, so no contextCSN) and we convert it to a delta-MMR setup:
# 1. stop the server (note that there is likely no contextCSN in the DB at this point)
# 2. configure all servers to delta-replicate from each other and start them up
#    - empty servers will start with a refresh of the main DB
#    - when the refresh is successful they should change over to replicating the log
# 3. keep making changes on all servers to see things still work

echo "This test tracks a case where slapd deadlocks during a significant write load"
echo "See http://www.openldap.org/its/index.cgi/?findid=8752 for more information."

MMR=4
iterations=42000
if [ -n "$CI" -o -n "$CIBUZZ_PID4" ]; then
	iterations=4200
fi
check_sync_every=100
MAPSIZE=`expr 100 \* 1024 \* 1024`
XDIR=$TESTDIR/srv

mkdir -p $TESTDIR

ITS=8752
ITSDIR=$DATADIR/regressions/its$ITS

for ((n=1; n<=$MMR; n++)); do
	DBDIR=${XDIR}$n/db
	mkdir -p ${XDIR}$n $DBDIR.1 $DBDIR.2
done

KILLPIDS=
echo "Starting slapd on TCP/IP port $PORT1..."
DBNOSYNC=yes config_filter $BACKEND ${AC_conf[monitor]} < $ITSDIR/slapd.conf > $CONF1
$SLAPD -f $CONF1 -h $URI1 -d $LVL $TIMING > $LOG1 2>&1 &
PID=$!
if test $WAIT != 0 ; then
	echo PID $PID
	read foo
fi
KILLPIDS="$PID"
check_running 1

echo "Populating database on first provider..."
$LDAPADD -D $MANAGERDN -H $URI1 -w $PASSWD << EOMODS >> $TESTOUT 2>&1
dn: $BASEDN
objectClass: organization
objectClass: dcObject
o: Example, Inc.
dc: example

dn: ou=People,$BASEDN
objectClass: organizationalUnit
ou: People

dn: ou=Groups,$BASEDN
objectClass: organizationalUnit
ou: Groups

dn: cn=Roger Rabbit,ou=People,$BASEDN
objectClass: inetOrgPerson
cn: Roger Rabbit
sn: Rabbit

dn: cn=Baby Herman,ou=People,$BASEDN
objectClass: inetOrgPerson
cn: Baby Herman
sn: Herman

dn: cn=Jessica_Rabbit,ou=People,$BASEDN
objectClass: inetOrgPerson
cn: Jessica_Rabbit
sn: Rabbit

dn: cn=Bugs_Bunny,ou=People,$BASEDN
objectClass: inetOrgPerson
cn: Bugs_Bunny
sn: Bunny

dn: cn=Daffy_Duck,ou=People,$BASEDN
objectClass: inetOrgPerson
cn: Daffy_Duck
sn: Duck

dn: cn=Elmer_Fudd,ou=People,$BASEDN
objectClass: inetOrgPerson
cn: Elmer_Fudd
sn: Fudd

dn: cn=Cartoonia,ou=Groups,$BASEDN
objectClass: groupOfNames
cn: Cartoonia
member: cn=Roger Rabbit,ou=People,$BASEDN
member: cn=Baby Herman,ou=People,$BASEDN
EOMODS

RC=$?
if test $RC != 0 ; then
	echo "ldapadd failed ($RC)!"
	killservers
	exit $RC
fi

echo "Stopping slapd and reworking configuration for MMR..."
killservers

KILLPIDS=
for ((n=1; n<=$MMR; n++)); do
	MYURI=`eval echo '$URI'$n`
	MYLOG=`eval echo '$LOG'$n`
	MYCONF=`eval echo '$CONF'$n`
	echo "Starting provider slapd on TCP/IP URI $MYURI"
	DBNOSYNC=yes config_filter $BACKEND ${AC_conf[monitor]} < $ITSDIR/slapd.conf.mmr \
		| sed -e "s/@MMR@/$n/g" -e "s/wronglog/log/" -e "s/@MAPSIZE@/$MAPSIZE/" > $MYCONF

	for ((j=1; j<=$MMR; j++)); do
		MMCURI=`eval echo '$URI'$j`
		sed -ie "s|MMC${j}|${MMCURI}|" $MYCONF
	done

	$SLAPD_HUGE -f $MYCONF -h $MYURI -d $LVL $TIMING |& gzip > $MYLOG.gz &
	PID=$(jobs -p | tail -1)
	if test $WAIT != 0 ; then
		echo PID $PID
		read foo
	fi
	KILLPIDS="$PID $KILLPIDS"
	check_running $n
done

echo "Setting up accesslog on each master..."
for ((n=1; n<=$MMR; n++)); do
	echo "Modifying dn: cn=Elmer_Fudd,ou=People,$BASEDN on master $n"
	MYURI=`eval echo '$URI'$n`
	$LDAPMODIFY -v -D "$MANAGERDN" -H $MYURI -w $PASSWD > \
		$TESTOUT 2>&1 << EOMODS

dn: cn=Elmer_Fudd,ou=People,$BASEDN
changetype: modify
replace: sn
sn: Fudd
EOMODS
	RC=$?
	if test $RC != 0 ; then
		echo "ldapmodify failed ($RC)!"
		killservers
		exit $RC
	fi
	sleep $SLEEP1
done

#echo "Letting server 1 establish its own contextCSN..."
#echo "Modifying dn: cn=Elmer_Fudd,ou=People,$BASEDN on $URI1"
#$LDAPMODIFY -v -D "$MANAGERDN" -H $URI1 -w $PASSWD > \
#    $TESTOUT 2>&1 << EOMODS
#dn: cn=Elmer_Fudd,ou=People,$BASEDN
#changetype: modify
#replace: sn
#sn: Fudd
#EOMODS

for i in 0 1 2 3 4 5; do
	for ((j=1; j<=$MMR; j++)); do
		MYURI=`eval echo '$URI'$j`
		$LDAPSEARCH -b "$BASEDN" -H "$MYURI" \
			'*' '+' >"$TESTDIR/server$j.out" 2>&1
		RC=$?
		if test $RC != 0 ; then
			echo "ldapsearch failed ($RC)!"
			killservers
			exit $RC
		fi
		$LDIFFILTER -s ae < "$TESTDIR/server$j.out" > "$TESTDIR/server$j.flt"
	done

	in_sync=1
	for ((k=2; k<=$MMR; k++)); do
		$CMP "$TESTDIR/server1.flt" "$TESTDIR/server$k.flt" > $CMPOUT
		if test $? != 0 ; then
			in_sync=0
			break
		fi
	done
	if test $in_sync = 1; then
		break
	fi

	echo "Waiting $SLEEP1 seconds for servers to catch up..."
	sleep $SLEEP1
done

if test $in_sync = 0; then
	echo "Servers did not replicate in time"
	killservers
	exit 1
fi

echo "The next step of the test will perform $iterations random write operations and may take some time."
echo "As this test is for a deadlock, it will take manual intervention to exit the test if one occurs."

echo "Starting random master/entry modifications..."
DN1="cn=Elmer_Fudd,ou=People,$BASEDN"
VAL1="Fudd"

DN2="cn=Jessica_Rabbit,ou=People,$BASEDN"
VAL2="Rabbit"

DN3="cn=Bugs_Bunny,ou=People,$BASEDN"
VAL3="Bunny"

DN4="cn=Daffy_Duck,ou=People,$BASEDN"
VAL4="Duck"

for ((n=1; n<=$iterations; n++)); do
	rvalue=$(( RANDOM % $MMR + 1 ))
	MYURI=`eval echo '$URI'$rvalue`
	rvalue=$(( RANDOM % 4 + 1 ))
	MYDN=`eval echo '$DN'$rvalue`
	rvalue=$(( RANDOM % 4 + 1 ))
	MYVAL=`eval echo '$VAL'$rvalue`
	(( n % 250 == 1 )) && echo "Modifying $MYURI entry $MYDN with value $MYVAL iteration $n of $iterations"
	$LDAPMODIFY -v -D "$MANAGERDN" -H $MYURI -w $PASSWD > \
		$TESTOUT 2>&1 << EOMODS

dn: $MYDN
changetype: modify
replace: sn
sn: $MYVAL
EOMODS
	RC=$?
	if test $RC != 0 ; then
		echo "ldapmodify failed ($RC, $MYURI, $MYDN, $MYVAL)!"
		killservers
		exit $RC
	fi

	if [ "$check_sync_every" -gt 0 ] && [ `expr $n % $check_sync_every` = 0 ]; then
		echo "Checking replication status before we start iteration $n..."
		for i in 0 1 2 3 4 5; do
			for ((j=1; j<=$MMR; j++)); do
				MYURI=`eval echo '$URI'$j`
				echo "Reading database from server $j..."
				$LDAPSEARCH -b "$BASEDN" -H "$MYURI" \
				'*' '+' >"$TESTDIR/server$j.out" 2>&1
				RC=$?
				if test $RC != 0 ; then
					echo "ldapsearch failed ($RC)!"
					killservers
					exit $RC
				fi
				$LDIFFILTER -s ae < "$TESTDIR/server$j.out" > "$TESTDIR/server$j.flt"
			done

			in_sync=1
			for ((k=2; k<=$MMR; k++)); do
				$CMP "$TESTDIR/server1.flt" "$TESTDIR/server$k.flt" > $CMPOUT
				if test $? != 0 ; then
					in_sync=0
					break
				fi
			done
			if test $in_sync = 1; then
				break
			fi

			echo "Waiting $SLEEP1 seconds for servers to catch up..."
			sleep $SLEEP1
		done

		if test $in_sync = 0; then
			echo "Servers did not replicate in time"
			killservers
			exit 1
		fi
	fi
done

kill -HUP $KILLPIDS
wait $KILLPIDS

echo "The next step of the test will perform $iterations random write operations and may take some time."
echo "As this test is for a deadlock, it will take manual intervention to exit the test if one occurs."

echo "Starting servers again, this time with the wrong logbase setting..."
KILLPIDS=
for ((n=1; n<=$MMR; n++)); do
	MYURI=`eval echo '$URI'$n`
	MYLOG=`eval echo '$LOG'$n`
	MYCONF=`eval echo '$CONF'$n`
	echo "Starting provider slapd on TCP/IP URI $MYURI"
	DBNOSYNC=yes config_filter $BACKEND ${AC_conf[monitor]} < $ITSDIR/slapd.conf.mmr \
		| sed -e "s/@MMR@/$n/g" -e "s/@MAPSIZE@/$MAPSIZE/" > $MYCONF

	for ((j=1; j<=$MMR; j++)); do
		MMCURI=`eval echo '$URI'$j`
		sed -ie "s|MMC${j}|${MMCURI}|" $MYCONF
	done
	$SLAPD_HUGE -f $MYCONF -h $MYURI -d $LVL $TIMING |& gzip > $MYLOG.gz &
	PID=$(jobs -p | tail -1)
	if test $WAIT != 0 ; then
		echo PID $PID
		read foo
	fi
	KILLPIDS="$PID $KILLPIDS"
	check_running $n
done

echo "Starting random master/entry modifications..."
for ((n=1; n<=$iterations; n++)); do
	seed=`date +%N|sed s/...$//`
	rvalue=`echo|awk "BEGIN {srand($seed)
	{print int(1+rand()*$MMR)}}"`
	MYURI=`eval echo '$URI'$rvalue`
	seed=`date +%N|sed s/...$//`
	rvalue=`echo|awk "BEGIN {srand($seed)
	{print int(1+rand()*4)}}"`
	MYDN=`eval echo '$DN'$rvalue`
	MYVAL=`eval echo '$VAL'$rvalue`
	echo "Modifying $MYURI entry $MYDN with value $MYVAL iteration $n of $iterations"
	$LDAPMODIFY -v -D "$MANAGERDN" -H $MYURI -w $PASSWD > $TESTOUT 2>&1 << EOMODS

dn: $MYDN
changetype: modify
replace: sn
sn: $MYVAL
EOMODS
	RC=$?
	if test $RC != 0; then
		echo "ldapmodify failed ($RC)"
		killservers
		exit 1
	fi

	if [ "$check_sync_every" -gt 0 ] && [ `expr $n % $check_sync_every` = 0 ]; then
		echo "Checking replication status before we start iteration $n..."
		for i in 0 1 2 3 4 5; do
			for ((j=1; j<=$MMR; j++)); do
				MYURI=`eval echo '$URI'$j`
				echo "Reading database from server $j..."
				$LDAPSEARCH -b "$BASEDN" -H "$MYURI" '*' '+' >"$TESTDIR/server$j.out" 2>&1
				RC=$?
				if test $RC != 0 ; then
					echo "ldapsearch failed ($RC)!"
					killservers
					exit $RC
				fi
				$LDIFFILTER -s ae < "$TESTDIR/server$j.out" > "$TESTDIR/server$j.flt"
			done

			in_sync=1
			for ((k=2; k<=$MMR; k++)); do
				$CMP "$TESTDIR/server1.flt" "$TESTDIR/server$k.flt" > $CMPOUT
				if test $? != 0 ; then
					in_sync=0
					break
				fi
			done
			if test $in_sync = 1; then
				break
			fi

			echo "Waiting $SLEEP1 seconds for servers to catch up..."
			sleep $SLEEP1
		done

		if test $in_sync = 0; then
			echo "Servers did not replicate in time"
			killservers
			exit 1
		fi
	fi
done

killservers
echo ">>>>> Test succeeded"
exit 0
