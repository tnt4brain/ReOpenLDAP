#!/bin/bash
## $ReOpenLDAP$
## Copyright 1998-2018 ReOpenLDAP AUTHORS: please see AUTHORS file.
## All rights reserved.
##
## This file is part of ReOpenLDAP.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted only as authorized by the OpenLDAP
## Public License.
##
## A copy of this license is available in the file LICENSE in the
## top-level directory of the distribution or, alternatively, at
## <http://www.OpenLDAP.org/license.html>.

echo "running defines.sh"
. ${TOP_SRCDIR}/tests/scripts/defines.sh

if test ${AC_conf[memberof]} = no; then
	echo "memberof overlay not available, test skipped"
	exit 0
fi

echo ""
echo "  This test tracks a case where it was not possible to modify the memberof overlay configuration"
echo "  when the provider is dynamically configured for replication."
echo "  See http://www.openldap.org/its/index.cgi/?findid=8663 for more information"
echo ""

PRODIR=$TESTDIR/pro
CFPRO=$PRODIR/slapd.d

mkdir -p $TESTDIR $DBDIR1 $PRODIR $CFPRO

$SLAPPASSWD -g -n >$CONFIGPWF

ITS=8663
ITSDIR=$DATADIR/regressions/its$ITS

echo "Starting provider slapd on TCP/IP port $PORT1..."
config_filter $BACKEND ${AC_conf[monitor]} < $ITSDIR/slapd-provider.ldif > $CONFLDIF
$SLAPADD -F $CFPRO -n 0 -l $CONFLDIF
RC=$?
if test $RC != 0 ; then
	echo "slapadd failed ($RC)!"
	exit $RC
fi
$SLAPD -F $CFPRO -h $URI1 -d $LVL $TIMING > $LOG1 2>&1 &
PID=$!
if test $WAIT != 0 ; then
	echo PID $PID
	read foo
fi
KILLPIDS="$PID"
check_running 1

echo "Populating database on provider..."
$LDAPADD -D $MANAGERDN -H $URI1 -w $PASSWD << EOMODS >> $TESTOUT 2>&1
dn: dc=example,dc=com
changetype: add
objectClass: domain
objectClass: top
dc: example

dn: ou=LDAPRoles,dc=example,dc=com
objectClass: top
objectClass: organizationalUnit
ou: LDAPRoles

dn: dc=users,dc=example,dc=com
changetype: add
dc: users
objectClass: domain
objectClass: top

dn: uid=johndoe,dc=users,dc=example,dc=com
changetype: add
objectClass: inetOrgPerson
objectClass: top
sn: Doe
cn: Johndoe
uid: johndoe

dn: cn=replicator,ou=LDAPRoles,dc=example,dc=com
objectClass: top
objectClass: simpleSecurityObject
objectClass: organizationalRole
userPassword: secret
cn: replicator
EOMODS

RC=$?
if test $RC != 0 ; then
	echo "ldapadd failed ($RC)!"
	killservers
	exit $RC
fi

if test ${AC_conf[memberof]} = mod; then
	echo "Configuring memberof module on the provider..."
	$LDAPADD -D cn=config -H $URI1 -y $CONFIGPWF <<EOF > $TESTOUT 2>&1
dn: cn=module,cn=config
objectClass: olcModuleList
cn: module
olcModulePath: $TESTWD/../servers/slapd/overlays
olcModuleLoad: memberof.la
EOF
	RC=$?
	if test $RC != 0 ; then
		echo "ldapadd failed for moduleLoad ($RC)!"
		killservers
		exit $RC
	fi
fi

echo "Configuring memberof on the provider..."
$LDAPMODIFY -D cn=config -H $URI1 -y $CONFIGPWF <<EOF >>$TESTOUT 2>&1
dn: olcOverlay={0}memberof,olcDatabase={1}$BACKEND,cn=config
changetype: add
objectClass: olcOverlayConfig
objectClass: olcConfig
objectClass: top
objectClass: olcMemberOf
olcMemberOfGroupOC: groupOfNames
olcMemberOfMemberAD: member
olcMemberOfMemberOfAD: memberOf
olcMemberOfDN: cn=Manager,dc=example,dc=com
olcMemberOfDangling: ignore
olcMemberOfDanglingError: 13
olcMemberOfRefInt: FALSE
olcOverlay: {0}memberof
EOF

RC=$?
if test $RC != 0 ; then
	echo "ldapmodify failed ($RC)!"
	killservers
	exit $RC
fi

sleep $SLEEP0

echo "Setting olcMemberOfRefInt to TRUE on the provider..."
$LDAPMODIFY -D cn=config -H $URI1 -y $CONFIGPWF <<EOF >>$TESTOUT 2>&1
dn: olcOverlay={0}memberof,olcDatabase={1}$BACKEND,cn=config
changetype: modify
replace: olcMemberOfRefInt
olcMemberOfRefInt: TRUE
EOF

RC=$?
if test $RC != 0 ; then
	echo "ldapmodify failed ($RC)!"
	killservers
	exit $RC
fi

sleep $SLEEP0

echo "Changing olcMemberOfDangling to error on the provider..."
$LDAPMODIFY -D cn=config -H $URI1 -y $CONFIGPWF <<EOF >>$TESTOUT 2>&1
dn: olcOverlay={0}memberof,olcDatabase={1}$BACKEND,cn=config
changetype: modify
replace: olcMemberOfDangling
olcMemberOfDangling: error
EOF

RC=$?
if test $RC != 0 ; then
	echo "ldapmodify failed ($RC)!"
	killservers
	exit $RC
fi

sleep $SLEEP0

echo "Changing olcMemberOfDanglingError to 20 on the provider..."
$LDAPMODIFY -D cn=config -H $URI1 -y $CONFIGPWF <<EOF >>$TESTOUT 2>&1
dn: olcOverlay={0}memberof,olcDatabase={1}$BACKEND,cn=config
changetype: modify
replace: olcMemberOfDanglingError
olcMemberOfDanglingError: 20
EOF

RC=$?
if test $RC != 0 ; then
	echo "ldapmodify failed ($RC)!"
	killservers
	exit $RC
fi

sleep $SLEEP0

echo "Setting olcMemberOfDN to cn=config on the provider..."
$LDAPMODIFY -D cn=config -H $URI1 -y $CONFIGPWF <<EOF >>$TESTOUT 2>&1
dn: olcOverlay={0}memberof,olcDatabase={1}$BACKEND,cn=config
changetype: modify
replace: olcMemberOfDN
olcMemberOfDN: cn=config
EOF

RC=$?
if test $RC != 0 ; then
	echo "ldapmodify failed ($RC)!"
	killservers
	exit $RC
fi

sleep $SLEEP0

echo "Changing olcMemberOfGroupOC to groupOfUniqueNames on the provider..."
$LDAPMODIFY -D cn=config -H $URI1 -y $CONFIGPWF <<EOF >>$TESTOUT 2>&1
dn: olcOverlay={0}memberof,olcDatabase={1}$BACKEND,cn=config
changetype: modify
replace: olcMemberOfGroupOC
olcMemberOfGroupOC: groupOfNames
EOF

RC=$?
if test $RC != 0 ; then
	echo "ldapmodify failed ($RC)!"
	killservers
	exit $RC
fi

sleep $SLEEP0

echo "Changing olcMemberOfMemberAD to uniqueMember on the provider..."
$LDAPMODIFY -D cn=config -H $URI1 -y $CONFIGPWF <<EOF >>$TESTOUT 2>&1
dn: olcOverlay={0}memberof,olcDatabase={1}$BACKEND,cn=config
changetype: modify
replace: olcMemberOfMemberAD
olcMemberOfMemberAD: uniqueMember
EOF

RC=$?
if test $RC != 0 ; then
	echo "ldapmodify failed ($RC)!"
	killservers
	exit $RC
fi

echo "Changing olcMemberOfMemberOfAD to owner on the provider..."
$LDAPMODIFY -D cn=config -H $URI1 -y $CONFIGPWF <<EOF >>$TESTOUT 2>&1
dn: olcOverlay={0}memberof,olcDatabase={1}$BACKEND,cn=config
changetype: modify
replace: olcMemberOfMemberOfAD
olcMemberOfMemberOfAD: owner
EOF

RC=$?
if test $RC != 0 ; then
	echo "ldapmodify failed ($RC)!"
	killservers
	exit $RC
fi

killservers
echo ">>>>> Test succeeded"
exit 0
