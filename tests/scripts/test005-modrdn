#!/bin/bash
## $ReOpenLDAP$
## Copyright 1998-2018 ReOpenLDAP AUTHORS: please see AUTHORS file.
## All rights reserved.
##
## This file is part of ReOpenLDAP.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted only as authorized by the OpenLDAP
## Public License.
##
## A copy of this license is available in the file LICENSE in the
## top-level directory of the distribution or, alternatively, at
## <http://www.OpenLDAP.org/license.html>.

echo "running defines.sh"
. ${TOP_SRCDIR}/tests/scripts/defines.sh

mkdir -p $TESTDIR $DBDIR1A $DBDIR1B

echo "Running slapadd to build slapd database..."
config_filter $BACKEND ${AC_conf[monitor]} < $CONF2DB > $CONF1
$SLAPADD -f $CONF1 -b "$BASEDN" -l $LDIFORDERED
RC=$?
if test $RC != 0 ; then
	echo "slapadd failed ($RC)!"
	exit $RC
fi

echo "Starting slapd on TCP/IP port $PORT1..."
$SLAPD -f $CONF1 -h $URI1 $TIMING > $LOG1 2>&1 &
PID=$!
if test $WAIT != 0 ; then
    echo PID $PID
    read foo
fi
KILLPIDS="$PID"
check_running 1

echo "Testing slapd modrdn operations..."
$LDAPSEARCH -S "" -b "$BASEDN" -h $LOCALHOST -p $PORT1 \
    'objectClass=*' > $INITOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	killservers
	exit $RC
fi

# -r used to do remove of old rdn

echo "Testing modrdn(deleteoldrdn=0)..."
$LDAPMODRDN -D "$MANAGERDN" -h $LOCALHOST -p $PORT1 -w $PASSWD > \
	$TESTOUT 2>&1 'cn=James A Jones 1, ou=Alumni Association, ou=People, dc=example, dc=com' 'cn=James A Jones III'

RC=$?
if test $RC != 0 ; then
	echo "ldapmodrdn failed ($RC)!"
	killservers
	exit $RC
fi

echo "Testing modrdn(deleteoldrdn=1)..."
$LDAPMODRDN -D "$MANAGERDN" -r -h $LOCALHOST -p $PORT1 -w $PASSWD >> \
	$TESTOUT 2>&1 'cn=James A Jones 2, ou=Information Technology Division, ou=People, dc=example, dc=com' 'cn=James A Jones II'

RC=$?
if test $RC != 0 ; then
	echo "ldapmodrdn failed ($RC)!"
	killservers
	exit $RC
fi

# Ensure the new rdn's can be found

echo "Using ldapsearch to retrieve entries using new rdn (cn=James A Jones III)..."
$LDAPSEARCH -S "" -b "$BASEDN" -h $LOCALHOST -p $PORT1 \
	    'cn=James A Jones III' > $SEARCHOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	killservers
	exit $RC
fi


LDIF=$MODRDNOUTMASTER1

echo "Filtering ldapsearch results..."
$LDIFFILTER < $SEARCHOUT > $SEARCHFLT
echo "Filtering original ldif used to create database..."
$LDIFFILTER < $LDIF > $LDIFFLT
echo "Comparing filter output..."
$CMP $SEARCHFLT $LDIFFLT > $CMPOUT

if test $? != 0 ; then
	echo "comparison failed - modrdn operations did not complete correctly"
	killservers
	exit 2
fi


echo "Using ldapsearch to retrieve entries using new rdn (cn=James A Jones II)..."
$LDAPSEARCH -S "" -b "$BASEDN" -h $LOCALHOST -p $PORT1 \
	    'cn=James A Jones II' > $SEARCHOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	killservers
	exit $RC
fi


LDIF=$MODRDNOUTMASTER2

echo "Filtering ldapsearch results..."
$LDIFFILTER < $SEARCHOUT > $SEARCHFLT
echo "Filtering original ldif used to create database..."
$LDIFFILTER < $LDIF > $LDIFFLT
echo "Comparing filter output..."
$CMP $SEARCHFLT $LDIFFLT > $CMPOUT

if test $? != 0 ; then
	echo "comparison failed - modrdn operations did not complete correctly"
	killservers
	exit 2
fi

# Ensure that you cannot find the entry for which the rdn was deleted as
# an attribute.

echo "Using ldapsearch to retrieve entries using removed rdn (cn=James A Jones 2)..."
$LDAPSEARCH -S "" -b "$BASEDN" -h $LOCALHOST -p $PORT1 \
	    'cn=James A Jones 2' > $SEARCHOUT 2>&1
RC=$?
if test $RC != 0 ; then
	killservers
	echo "ldapsearch failed ($RC)!"
	exit $RC
fi
$CMP $SEARCHOUT - < /dev/null > $CMPOUT
if test $? != 0 ; then
	echo "failure: ldapsearch found attribute that was to be removed!"
	killservers
	exit 2
fi

echo "Using ldapsearch to retrieve all the entries..."
$LDAPSEARCH -S "" -b "$BASEDN" -h $LOCALHOST -p $PORT1 \
	    'objectClass=*' > $SEARCHOUT 2>&1
RC=$?
if test $RC != 0 ; then
	killservers
	echo "ldapsearch failed ($RC)!"
	exit $RC
fi

LDIF=$MODRDNOUTMASTER0

echo "Filtering ldapsearch results..."
$LDIFFILTER < $SEARCHOUT > $SEARCHFLT
echo "Filtering original ldif used to create database..."
$LDIFFILTER < $LDIF > $LDIFFLT
echo "Comparing filter output..."
$CMP $SEARCHFLT $LDIFFLT > $CMPOUT

if test $? != 0 ; then
	echo "comparison failed - modrdn operations did not complete correctly"
	killservers
	exit 2
fi

# Test that you can use modrdn with an attribute value which was previously
# present

echo "Testing modrdn(deleteoldrdn=1), modrdn with new rdn already an att val..."
$LDAPMODRDN -D "$MANAGERDN" -r -h $LOCALHOST -p $PORT1 -w $PASSWD > \
	/dev/null 2>&1 'cn=James A Jones III, ou=Alumni Association, ou=People, dc=example, dc=com' 'cn=James A Jones 1'

RC=$?
if test $RC != 0 ; then
	echo "ldapmodrdn failed ($RC)!"
	killservers
	exit $RC
fi

echo "Using ldapsearch to retrieve entries using new rdn (cn=James A Jones 1)..."
$LDAPSEARCH -S "" -b "$BASEDN" -h $LOCALHOST -p $PORT1 \
	    'cn=James A Jones 1' > $SEARCHOUT 2>&1
RC=$?

if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	killservers
	exit $RC
fi

LDIF=$MODRDNOUTMASTER3

echo "Filtering ldapsearch results..."
$LDIFFILTER < $SEARCHOUT > $SEARCHFLT
echo "Filtering original ldif used to create database..."
$LDIFFILTER < $LDIF > $LDIFFLT
echo "Comparing filter output..."
$CMP $SEARCHFLT $LDIFFLT > $CMPOUT

if test $? != 0 ; then
	echo "comparison failed - modrdn operations did not complete correctly"
	killservers
	exit 2
fi

echo "Testing modrdn to another database (should fail with affectsMultipleDSAs)"
$LDAPMODRDN -D "$MANAGERDN" -h $LOCALHOST -p $PORT1 -w $PASSWD > \
	$TESTOUT 2>&1 'cn=All Staff,ou=Groups,dc=example,dc=com' 'cn=Everyone'
RC=$?
case $RC in
0)
	echo "ldapmodrdn succeeded, should have failed!"
	killservers
	exit 2
	;;
71)
	;;
*)
	echo "ldapmodrdn failed ($RC)!"
	killservers
	exit $RC
	;;
esac

echo "Testing modrdn with newSuperior = target (should fail with unwillingToPerform)"
$LDAPMODRDN -D "$MANAGERDN" -h $LOCALHOST -p $PORT1 -w $PASSWD > \
	$TESTOUT 2>&1  -s 'cn=James A Jones 1, ou=Alumni Association, ou=People, dc=example, dc=com' \
	'cn=James A Jones 1, ou=Alumni Association, ou=People, dc=example, dc=com' 'cn=James A Jones 1'

RC=$?
case $RC in
0)
	echo "ldapmodrdn succeeded, should have failed!"
	killservers
	exit 2
	;;
53)
	;;
*)
	echo "ldapmodrdn failed ($RC)!"
	killservers
	exit $RC
	;;
esac

echo "Testing modrdn with newRdn exact same as target..."
$LDAPMODRDN -D "$MANAGERDN" -h $LOCALHOST -p $PORT1 -w $PASSWD > \
	$TESTOUT 2>&1 'cn=James A Jones 1, ou=Alumni Association, ou=People, dc=example, dc=com' 'cn=James A Jones 1'

RC=$?
case $RC in
0)
	;;
*)
	echo "ldapmodrdn failed ($RC)!"
	killservers
	exit $RC
	;;
esac

echo "Testing modrdn with newRdn same as target, changed case..."
$LDAPMODRDN -D "$MANAGERDN" -h $LOCALHOST -p $PORT1 -w $PASSWD > \
	$TESTOUT 2>&1 'cn=James A Jones 1, ou=Alumni Association, ou=People, dc=example, dc=com' 'cn=James A JONES 1'

RC=$?
case $RC in
0)
	;;
*)
	echo "ldapmodrdn failed ($RC)!"
	killservers
	exit $RC
	;;
esac

killservers
echo ">>>>> Test succeeded"
exit 0
