#!/bin/bash
## $ReOpenLDAP$
## Copyright 1998-2018 ReOpenLDAP AUTHORS: please see AUTHORS file.
## All rights reserved.
##
## This file is part of ReOpenLDAP.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted only as authorized by the OpenLDAP
## Public License.
##
## A copy of this license is available in the file LICENSE in the
## top-level directory of the distribution or, alternatively, at
## <http://www.OpenLDAP.org/license.html>.

echo "running defines.sh"
. ${TOP_SRCDIR}/tests/scripts/defines.sh

if test ${AC_conf[ldap]} = no; then
	echo "LDAP backend not available, test skipped"
	exit 0
fi

if test ${AC_conf[syncprov]} = no; then
	echo "Syncrepl provider overlay not available, test skipped"
	exit 0
fi

if test ${AC_conf[monitor]} = no; then
	echo "Monitor backend not available, test skipped"
	exit 0
fi

mkdir -p $TESTDIR $DBDIR1 $DBDIR2 $DBDIR3

#
# Test replication:
# - start master
# - start slave
# - populate over ldap
# - perform some modifies and deleted
# - attempt to modify the slave (referral or chain)
# - retrieve database over ldap and compare against expected results
#

echo "Starting master slapd on TCP/IP port $PORT1..."
config_filter $BACKEND ${AC_conf[monitor]} < $PLSRMASTERCONF > $CONF1
sed -e 's/\(^syncrepl\)\|\(^overlay\tsyncprov\)/biglock\t\tlocal\n&/' -i $CONF1
$SLAPD -f $CONF1 -h $URI1 $TIMING > $LOG1 2>&1 &
MASTERPID=$!
if test $WAIT != 0 ; then
    echo MASTERPID $MASTERPID
    read foo
fi
KILLPIDS="$MASTERPID"
check_running 1 master

echo "Using ldapadd to create the context prefix entry in the master..."
$LDAPADD -D "$MANAGERDN" -h $LOCALHOST -p $PORT1 -w $PASSWD < \
	$LDIFORDEREDCP > /dev/null 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapadd failed ($RC)!"
	killservers
	exit $RC
fi

echo "Starting P1-slave slapd on TCP/IP port $PORT2..."
config_filter $BACKEND ${AC_conf[monitor]} < $RSLAVECONF > $CONF2
$SLAPD -f $CONF2 -h $URI2 $TIMING > $LOG2 2>&1 &
P1SLAVEPID=$!
if test $WAIT != 0 ; then
    echo P1SLAVEPID $P1SLAVEPID
    read foo
fi
KILLPIDS="$MASTERPID $P1SLAVEPID"
check_running 2 P1-slave

echo "Starting R1-slave slapd on TCP/IP port $PORT3..."
config_filter $BACKEND ${AC_conf[monitor]} < $RSLAVECONF | sed -e 's;\.2\.\([^/]*\)$;.3.\1;' > $CONF3
$SLAPD -f $CONF3 -h $URI3 $TIMING > $LOG3 2>&1 &
R1SLAVEPID=$!
if test $WAIT != 0 ; then
    echo R1SLAVEPID $R1SLAVEPID
    read foo
fi
KILLPIDS="$MASTERPID $P1SLAVEPID $R1SLAVEPID"
check_running 3 R1-slave

CHECK=1
echo "$CHECK > Using ldapadd to populate the master directory..."
$LDAPADD -D "$MANAGERDN" -h $LOCALHOST -p $PORT1 -w $PASSWD < \
	$LDIFORDEREDNOCP > /dev/null 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapadd failed ($RC)!"
	killservers
	exit $RC
fi

#echo "Waiting $SLEEP1 seconds for syncrepl to receive changes..."
wait_syncrepl $PORT1 $PORT2

for retry in y y n; do
	#echo "Using ldapsearch to read all the entries from the master..."
	$LDAPSEARCH -S "" -b "$BASEDN" -h $LOCALHOST -p $PORT1 \
		'(objectClass=*)' > "${MASTEROUT}.1" 2>&1
	RC=$?

	if test $RC != 0 ; then
		echo "ldapsearch failed at master ($RC)!"
		killservers
		exit $RC
	fi

	#echo "Using ldapsearch to read all the entries from the P1-slave..."
	$LDAPSEARCH -S "" -b "$BASEDN" -h $LOCALHOST -p $PORT2 \
		'(objectClass=*)' > "${SLAVEOUT}.1" 2>&1
	RC=$?

	if test $RC != 0 ; then
		echo "ldapsearch failed at P1-slave ($RC)!"
		killservers
		exit $RC
	fi

	#echo "Filtering master results..."
	$LDIFFILTER < "${MASTEROUT}.1" > $MASTERFLT
	#echo "Filtering slave results..."
	$LDIFFILTER < "${SLAVEOUT}.1" > $SLAVEFLT

	echo "$CHECK < Comparing retrieved entries from master and P1-slave..."
	$CMP $MASTERFLT $SLAVEFLT > $CMPOUT

	if test $? = 0 ; then
		break
	elif [ $retry = y ]; then
		echo "sleep $SLEEP1 and retry"
		sleep $SLEEP1
	else
		echo "test failed - master and P1-slave databases differ"
		killservers
		exit 1
	fi
done

#echo "Waiting $SLEEP1 seconds for syncrepl to receive changes..."
wait_syncrepl $PORT1 $PORT3

for retry in y y n; do
	#echo "Using ldapsearch to read all the entries from the R1-slave..."
	$LDAPSEARCH -S "" -b "$BASEDN" -h $LOCALHOST -p $PORT3 \
		'(objectClass=*)' > "${SLAVEOUT}.1" 2>&1
	RC=$?

	if test $RC != 0 ; then
		echo "ldapsearch failed at R1-slave ($RC)!"
		killservers
		exit $RC
	fi

	#echo "Filtering slave results..."
	$LDIFFILTER < "${SLAVEOUT}.1" > $SLAVEFLT

	echo "$CHECK < Comparing retrieved entries from master and R1-slave..."
	$CMP $MASTERFLT $SLAVEFLT > $CMPOUT

	if test $? = 0 ; then
		break
	elif [ $retry = y ]; then
		echo "sleep $SLEEP1 and retry"
		sleep $SLEEP1
	else
		echo "test failed - master and R1-slave databases differ"
		killservers
		exit 1
	fi
done

CHECK=`expr $CHECK + 1`
echo -n "$CHECK > Stopping the provider ($MASTERPID), sleeping $SLEEP1 seconds and restarting it..."
kill -HUP $MASTERPID && safewait $MASTERPID && echo " Done" || echo " Failure ($?) !!!"
sleep $SLEEP1

echo "======================= RESTART =======================" >> $LOG1
$SLAPD -f $CONF1 -h $URI1 $TIMING >> $LOG1 2>&1 &
MASTERPID=$!
if test $WAIT != 0 ; then
    echo MASTERPID $MASTERPID
    read foo
fi
KILLPIDS="$MASTERPID $P1SLAVEPID $R1SLAVEPID"
check_running 1 master

echo "Using ldapmodify to modify master directory..."

#
# Do some modifications
#

$LDAPMODIFY -v -D "$MANAGERDN" -h $LOCALHOST -p $PORT1 -w $PASSWD > \
	$TESTOUT 2>&1 << EOMODS
dn: cn=James A Jones 1, ou=Alumni Association, ou=People, dc=example,dc=com
changetype: modify
add: drink
drink: Orange Juice
-
delete: sn
sn: Jones
-
add: sn
sn: Jones

dn: cn=Bjorn Jensen, ou=Information Technology Division, ou=People, dc=example,dc=com
changetype: modify
replace: drink
drink: Iced Tea

dn: cn=ITD Staff,ou=Groups,dc=example,dc=com
changetype: modify
delete: uniquemember
uniquemember: cn=James A Jones 2, ou=Information Technology Division, ou=People, dc=example,dc=com
uniquemember: cn=Bjorn Jensen, ou=Information Technology Division, ou=People, dc=example,dc=com
-
add: uniquemember
uniquemember: cn=Dorothy Stevens, ou=Alumni Association, ou=People, dc=example,dc=com
uniquemember: cn=James A Jones 1, ou=Alumni Association, ou=People, dc=example,dc=com

dn: cn=Bjorn Jensen,ou=Information Technology Division,ou=People,dc=example,dc
 =com
changetype: modify
delete: cn
cn: Biiff Jensen

dn: cn=Gern Jensen, ou=Information Technology Division, ou=People, dc=example,dc=com
changetype: add
objectclass: OpenLDAPperson
cn: Gern Jensen
sn: Jensen
uid: gjensen
title: Chief Investigator, ITD
postaladdress: ITD $ 535 W. William St $ Ann Arbor, MI 48103
seealso: cn=All Staff, ou=Groups, dc=example,dc=com
drink: Coffee
homepostaladdress: 844 Brown St. Apt. 4 $ Ann Arbor, MI 48104
description: Very odd
facsimiletelephonenumber: +1 313 555 7557
telephonenumber: +1 313 555 8343
mail: gjensen@mailgw.example.com
homephone: +1 313 555 8844

dn: ou=Retired, ou=People, dc=example,dc=com
changetype: add
objectclass: organizationalUnit
ou: Retired

dn: cn=Rosco P. Coltrane, ou=Information Technology Division, ou=People, dc=example,dc=com
changetype: add
objectclass: OpenLDAPperson
cn: Rosco P. Coltrane
sn: Coltrane
uid: rosco
description: Fat tycoon

dn: cn=Rosco P. Coltrane, ou=Information Technology Division, ou=People, dc=example,dc=com
changetype: modrdn
newrdn: cn=Rosco P. Coltrane
deleteoldrdn: 1
newsuperior: ou=Retired, ou=People, dc=example,dc=com

dn: cn=James A Jones 2, ou=Information Technology Division, ou=People, dc=example,dc=com
changetype: delete
EOMODS

RC=$?
if test $RC != 0 ; then
	echo "ldapmodify failed ($RC)!"
	killservers
	exit $RC
fi

#echo "Waiting $SLEEP1 seconds for syncrepl to receive changes..."
wait_syncrepl $PORT1 $PORT2

for retry in y y n; do
	#echo "Using ldapsearch to read all the entries from the master..."
	$LDAPSEARCH -S "" -b "$BASEDN" -h $LOCALHOST -p $PORT1 \
		'(objectClass=*)' > "${MASTEROUT}.2" 2>&1
	RC=$?

	if test $RC != 0 ; then
		echo "ldapsearch failed at master ($RC)!"
		killservers
		exit $RC
	fi

	#echo "Using ldapsearch to read all the entries from the P1-slave..."
	$LDAPSEARCH -S "" -b "$BASEDN" -h $LOCALHOST -p $PORT2 \
		'(objectClass=*)' > "${SLAVEOUT}.2" 2>&1
	RC=$?

	if test $RC != 0 ; then
		echo "ldapsearch failed at P1 slave ($RC)!"
		killservers
		exit $RC
	fi

	#echo "Filtering master results..."
	$LDIFFILTER < "${MASTEROUT}.2" > $MASTERFLT
	#echo "Filtering P1-slave results..."
	$LDIFFILTER < "${SLAVEOUT}.2" > $SLAVEFLT

	echo "$CHECK < Comparing retrieved entries from master and P1-slave..."
	$CMP $MASTERFLT $SLAVEFLT > $CMPOUT

	if test $? = 0 ; then
		break
	elif [ $retry = y ]; then
		echo "sleep $SLEEP1 and retry"
		sleep $SLEEP1
	else
		echo "test failed - master and P1-slave databases differ"
		killservers
		exit 1
	fi
done

#echo "Waiting $SLEEP1 seconds for syncrepl to receive changes..."
wait_syncrepl $PORT1 $PORT3

for retry in y y n; do
	#echo "Using ldapsearch to read all the entries from the R1-slave..."
	$LDAPSEARCH -S "" -b "$BASEDN" -h $LOCALHOST -p $PORT3 \
		'(objectClass=*)' > "${SLAVEOUT}.2" 2>&1
	RC=$?

	if test $RC != 0 ; then
		echo "ldapsearch failed at R1 slave ($RC)!"
		killservers
		exit $RC
	fi

	#echo "Filtering slave results..."
	$LDIFFILTER < "${SLAVEOUT}.2" > $SLAVEFLT

	echo "$CHECK < Comparing retrieved entries from master and R1-slave..."
	$CMP $MASTERFLT $SLAVEFLT > $CMPOUT

	if test $? = 0 ; then
		break
	elif [ $retry = y ]; then
		echo "sleep $SLEEP1 and retry"
		sleep $SLEEP1
	else
		echo "test failed - master and R1-slave databases differ"
		killservers
		exit 1
	fi
done

CHECK=`expr $CHECK + 1`
echo -n "$CHECK > Stopping slaves ($P1SLAVEPID, $R1SLAVEPID) to test recovery..."
kill -HUP $P1SLAVEPID $R1SLAVEPID && safewait $P1SLAVEPID $R1SLAVEPID && echo " Done" || echo " Failure ($?) !!!"

echo "Modifying more entries on the master..."
$LDAPMODIFY -v -D "$MANAGERDN" -h $LOCALHOST -p $PORT1 -w $PASSWD >> \
	$TESTOUT 2>&1 << EOMODS
dn: cn=Bjorn Jensen, ou=Information Technology Division, ou=People, dc=example,dc=com
changetype: modify
add: description
description: r1 slave is down...

dn: cn=James T. Kirk, ou=Retired, ou=People, dc=example,dc=com
changetype: add
objectclass: OpenLDAPperson
sn: Kirk
uid: jtk
cn: James T. Kirk

dn: cn=Tiberius J. Hooker, ou=Retired, ou=People, dc=example,dc=com
changetype: add
objectclass: OpenLDAPperson
sn: Hooker
uid: tjh
cn: Tiberius J. Hooker

EOMODS

echo "Restarting P1-slave..."
echo "======================= RESTART =======================" >> $LOG3
$SLAPD -f $CONF2 -h $URI2 $TIMING >> $LOG2 2>&1 &
P1SLAVEPID=$!
if test $WAIT != 0 ; then
    echo P1SLAVEPID $P1SLAVEPID
    read foo
fi

echo "Restarting R1-slave..."
echo "======================= RESTART =======================" >> $LOG3
$SLAPD -f $CONF3 -h $URI3 $TIMING >> $LOG3 2>&1 &
R1SLAVEPID=$!
if test $WAIT != 0 ; then
    echo R1SLAVEPID $R1SLAVEPID
    read foo
fi
KILLPIDS="$MASTERPID $P1SLAVEPID $R1SLAVEPID"

check_running 2 P1-slave
check_running 3 R1-slave

#echo "Waiting $SYNCREPL_WAIT seconds for syncrepl to receive changes..."
wait_syncrepl $PORT1 $PORT2

for retry in y y n; do
	#echo "Using ldapsearch to read all the entries from the master..."
	$LDAPSEARCH -S "" -b "$BASEDN" -h $LOCALHOST -p $PORT1 \
		'(objectClass=*)' > "${MASTEROUT}.3" 2>&1
	RC=$?

	if test $RC != 0 ; then
		echo "ldapsearch failed at master ($RC)!"
		killservers
		exit $RC
	fi

	#echo "Using ldapsearch to read all the entries from the P1-slave..."
	$LDAPSEARCH -S "" -b "$BASEDN" -h $LOCALHOST -p $PORT2 \
		'(objectClass=*)' > "${SLAVEOUT}.3" 2>&1
	RC=$?

	if test $RC != 0 ; then
		echo "ldapsearch failed at P1-slave ($RC)!"
		killservers
		exit $RC
	fi

	#echo "Filtering master results..."
	$LDIFFILTER < "${MASTEROUT}.3" > $MASTERFLT
	#echo "Filtering slave results..."
	$LDIFFILTER < "${SLAVEOUT}.3" > $SLAVEFLT

	echo "$CHECK < Comparing retrieved entries from master and P1-slave..."
	$CMP $MASTERFLT $SLAVEFLT > $CMPOUT

	if test $? = 0 ; then
		break
	elif [ $retry = y ]; then
		echo "sleep $SLEEP1 and retry"
		sleep $SLEEP1
	else
		echo "test failed - master and P1-slave databases differ"
		killservers
		exit 1
	fi
done

#echo "Waiting $SLEEP1 seconds for syncrepl to receive changes..."
wait_syncrepl $PORT1 $PORT3

for retry in y y n; do
	#echo "Using ldapsearch to read all the entries from the R1-slave..."
	$LDAPSEARCH -S "" -b "$BASEDN" -h $LOCALHOST -p $PORT3 \
		'(objectClass=*)' > "${SLAVEOUT}.3" 2>&1
	RC=$?

	if test $RC != 0 ; then
		echo "ldapsearch failed at R1-slave ($RC)!"
		killservers
		exit $RC
	fi

	#echo "Filtering slave results..."
	$LDIFFILTER < "${SLAVEOUT}.3" > $SLAVEFLT

	echo "$CHECK < Comparing retrieved entries from master and R1-slave..."
	$CMP $MASTERFLT $SLAVEFLT > $CMPOUT

	if test $? = 0 ; then
		break
	elif [ $retry = y ]; then
		echo "sleep $SLEEP1 and retry"
		sleep $SLEEP1
	else
		echo "test failed - master and R1-slave databases differ"
		killservers
		exit 1
	fi
done

CHECK=`expr $CHECK + 1`
echo "$CHECK > Try updating the P1-slave slapd..."
$LDAPMODIFY -v -D "$MANAGERDN" -h $LOCALHOST -p $PORT2 -w $PASSWD > \
	$TESTOUT 2>&1 << EOMODS
dn: cn=James A Jones 1, ou=Alumni Association, ou=People, dc=example, dc=com
changetype: modify
add: description
description: This write must fail because directed to a shadow context,
description: unless the chain overlay is configured appropriately ;)

EOMODS

RC=$?
if test $RC != 0 ; then
	echo "ldapmodify failed ($RC)!"
	killservers
	exit $RC
fi

#echo "Waiting $SLEEP1 seconds for syncrepl to receive changes..."
wait_syncrepl $PORT1 $PORT2

for retry in y y n; do
	#echo "Using ldapsearch to read all the entries from the master..."
	$LDAPSEARCH -S "" -b "$BASEDN" -h $LOCALHOST -p $PORT1 \
		'(objectClass=*)' > "${MASTEROUT}.4" 2>&1
	RC=$?

	if test $RC != 0 ; then
		echo "ldapsearch failed at master ($RC)!"
		killservers
		exit $RC
	fi

	#echo "Using ldapsearch to read all the entries from the P1-slave..."
	$LDAPSEARCH -S "" -b "$BASEDN" -h $LOCALHOST -p $PORT2 \
	'(objectClass=*)' > "${SLAVEOUT}.4" 2>&1
	RC=$?

	if test $RC != 0 ; then
		echo "ldapsearch failed at P1-slave ($RC)!"
		killservers
		exit $RC
	fi

	#echo "Filtering master results..."
	$LDIFFILTER < "${MASTEROUT}.4" > $MASTERFLT
	#echo "Filtering slave results..."
	$LDIFFILTER < "${SLAVEOUT}.4" > $SLAVEFLT

	echo "$CHECK < Comparing retrieved entries from master and P1-slave..."
	$CMP $MASTERFLT $SLAVEFLT > $CMPOUT

	if test $? = 0 ; then
		break
	elif [ $retry = y ]; then
		echo "sleep $SLEEP1 and retry"
		sleep $SLEEP1
	else
		echo "test failed - master and P1-slave databases differ"
		killservers
		exit 1
	fi
done

#echo "Waiting $SLEEP1 seconds for syncrepl to receive changes..."
wait_syncrepl $PORT1 $PORT3

for retry in y y n; do
	#echo "Using ldapsearch to read all the entries from the R1-slave..."
	$LDAPSEARCH -S "" -b "$BASEDN" -h $LOCALHOST -p $PORT3 \
	'(objectClass=*)' > "${SLAVEOUT}.4" 2>&1
	RC=$?

	if test $RC != 0 ; then
		echo "ldapsearch failed at R1-slave ($RC)!"
		killservers
		exit $RC
	fi

	#echo "Filtering slave results..."
	$LDIFFILTER < "${SLAVEOUT}.4" > $SLAVEFLT

	echo "$CHECK < Comparing retrieved entries from master and R1-slave..."
	$CMP $MASTERFLT $SLAVEFLT > $CMPOUT

	if test $? = 0 ; then
		break
	elif [ $retry = y ]; then
		echo "sleep $SLEEP1 and retry"
		sleep $SLEEP1
	else
		echo "test failed - master and R1-slave databases differ"
		killservers
		exit 1
	fi
done

killservers
echo ">>>>> Test succeeded"
exit 0
