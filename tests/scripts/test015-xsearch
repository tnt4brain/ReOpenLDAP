#!/bin/bash
## $ReOpenLDAP$
## Copyright 1998-2018 ReOpenLDAP AUTHORS: please see AUTHORS file.
## All rights reserved.
##
## This file is part of ReOpenLDAP.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted only as authorized by the OpenLDAP
## Public License.
##
## A copy of this license is available in the file LICENSE in the
## top-level directory of the distribution or, alternatively, at
## <http://www.OpenLDAP.org/license.html>.

echo "running defines.sh"
. ${TOP_SRCDIR}/tests/scripts/defines.sh

mkdir -p $TESTDIR $DBDIR1

echo "Running slapadd to build slapd database..."
config_filter $BACKEND ${AC_conf[monitor]} < $MCONF > $ADDCONF
$SLAPADD -f $ADDCONF -l $LDIFORDERED
RC=$?
if test $RC != 0 ; then
	echo "slapadd failed ($RC)!"
	exit $RC
fi

echo "Running slapindex to index slapd database..."
config_filter $BACKEND ${AC_conf[monitor]} < $CONF > $CONF1
$SLAPINDEX -f $CONF1
RC=$?
if test $RC != 0 ; then
	echo "warning: slapindex failed ($RC)"
	echo "  assuming no indexing support"
fi

echo "Starting slapd on TCP/IP port $PORT1..."
$SLAPD -f $CONF1 -h $URI1 $TIMING > $LOG1 2>&1 &
PID=$!
if test $WAIT != 0 ; then
    echo PID $PID
    read foo
fi
KILLPIDS="$PID"
check_running 1

cat /dev/null > $SEARCHOUT

echo "Testing exact searching..."
echo "# Testing exact searching..." >> $SEARCHOUT
$LDAPSEARCH -S "" -b "$BASEDN" -h $LOCALHOST -p $PORT1 \
	'(sn:=jensen)' >> $SEARCHOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	killservers
	exit $RC
fi

echo "Testing approximate searching..."
echo "# Testing approximate searching..." >> $SEARCHOUT
$LDAPSEARCH -S "" -b "$BASEDN" -h $LOCALHOST -p $PORT1 \
	'(sn~=jensen)' name >> $SEARCHOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	killservers
	exit $RC
fi

echo "Testing OR searching..."
echo "# Testing OR searching..." >> $SEARCHOUT
$LDAPSEARCH -S "" -b "$BASEDN" -h $LOCALHOST -p $PORT1 \
	'(|(givenName=XX*YY*Z)(cn=)(undef=*)(objectclass=groupofnames)(objectclass=groupofuniquenames)(sn:caseExactMatch:=Jones))' >> $SEARCHOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	killservers
	exit $RC
fi

echo "Testing AND matching and ends-with searching..."
echo "# Testing AND matching and ends-with searching..." >> $SEARCHOUT
$LDAPSEARCH -S "" -b "ou=groups,$BASEDN" -s one -h $LOCALHOST -p $PORT1 \
	'(&(|(objectclass=groupofnames)(objectclass=groupofuniquenames))(cn=A*))' >> $SEARCHOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	killservers
	exit $RC
fi

echo "Testing NOT searching..."
echo "# Testing NOT searching..." >> $SEARCHOUT
$LDAPSEARCH -S "" -b "$BASEDN" -h $LOCALHOST -p $PORT1 \
	'(!(objectclass=pilotPerson))' >> $SEARCHOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	killservers
	exit $RC
fi

echo "Testing objectClass/attributeType inheritance ..."
echo "# Testing objectClass/attributeType inheritance ..." >> $SEARCHOUT
$LDAPSEARCH -M -a never -S "" -b "$BASEDN" -h $LOCALHOST -p $PORT1 \
	'(&(objectClass=inetorgperson)(userid=uham))' \
	"2.5.4.0" "userid" >> $SEARCHOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	killservers
	exit $RC
fi

echo "Testing extended RFC2254 searching:"
echo "# Testing extended RFC2254 searching:" >> $SEARCHOUT

FILTER="(:dn:caseIgnoreIA5Match:=example)"
echo "        f=$FILTER ..."
echo "#         f=$FILTER ..." >> $SEARCHOUT
$LDAPSEARCH -S "" -b "$BASEDN" -h $LOCALHOST -p $PORT1 \
	"$FILTER" >> $SEARCHOUT 2>&1

RC=$?
if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	killservers
	exit $RC
fi

FILTER="(:dn:caseExactMatch:=Information Technology Division)"
echo "        f=$FILTER ..."
echo "#         f=$FILTER ..." >> $SEARCHOUT
$LDAPSEARCH -S "" -b "$BASEDN" -h $LOCALHOST -p $PORT1 \
	"$FILTER" >> $SEARCHOUT 2>&1

# ITS#4380: don't crash when a matchingRule without pretty/validate is used
FILTER="(:dn:caseIgnoreSubstringsMatch:=Information Technology Division)"
echo "        f=$FILTER ..."
echo "#         f=$FILTER ..." >> $SEARCHOUT
$LDAPSEARCH -S "" -b "$BASEDN" -h $LOCALHOST -p $PORT1 \
	"$FILTER" >> $SEARCHOUT 2>&1

RC=$?
if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	killservers
	exit $RC
fi

FILTER="(name:dn:=whatever)"
echo "        f=$FILTER ..."
echo "#         f=$FILTER ..." >> $SEARCHOUT
$LDAPSEARCH -S "" -b "" -s base -h $LOCALHOST -p $PORT1 \
	"$FILTER" >> $SEARCHOUT 2>&1

RC=$?
if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	killservers
	exit $RC
fi

echo "Testing values return filter searching:"
echo "# Testing values return filter searching:" >> $SEARCHOUT

FILTER="(o=Example, Inc.)"
echo "        f=$FILTER ..."
echo "#         f=$FILTER ..." >> $SEARCHOUT
$LDAPSEARCH -S "" -b "$BASEDN" -h $LOCALHOST -p $PORT1 \
	-E '!mv='"$FILTER" "$FILTER" >> $SEARCHOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	killservers
	exit $RC
fi

FILTER="(dc=example)"
VRFILTER="((o:caseExactMatch:=Example, Inc.)(dc=example))"
echo "        f=$FILTER mv=$VRFILTER ..."
echo "#         f=$FILTER mv=$VRFILTER ..." >> $SEARCHOUT
$LDAPSEARCH -S "" -b "$BASEDN" -h $LOCALHOST -p $PORT1 \
	-E '!mv='"$VRFILTER" "$FILTER" >> $SEARCHOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	killservers
	exit $RC
fi

FILTER="(dc=example)"
VRFILTER="((o={*)(dc=*))"
echo "        f=$FILTER mv=$VRFILTER ..."
echo "#         f=$FILTER mv=$VRFILTER ..." >> $SEARCHOUT
$LDAPSEARCH -S "" -b "$BASEDN" -h $LOCALHOST -p $PORT1 \
	-E '!mv='"$VRFILTER" "$FILTER" >> $SEARCHOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	killservers
	exit $RC
fi

FILTER="(attributeTypes=0.9.2342.19200300.100.1.25)"
echo "        f=$FILTER ..."
echo "#         f=$FILTER ..." >> $SEARCHOUT
$LDAPSEARCH -S "" -b "cn=Subschema" -s "base" -h $LOCALHOST -p $PORT1 \
	-E '!mv='"$FILTER" "$FILTER" "attributeTypes" >> $SEARCHOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	killservers
	exit $RC
fi

killservers

LDIF=$SEARCHOUTMASTER
LDIF2=$SEARCHOUTX

echo "Filtering ldapsearch results..."
$LDIFFILTER < $SEARCHOUT > $SEARCHFLT
echo "Filtering original ldif used to create database..."
$LDIFFILTER < $LDIF > $LDIFFLT
$LDIFFILTER < $LDIF2 >> $LDIFFLT
echo "Comparing filter output..."
$CMP $SEARCHFLT $LDIFFLT > $CMPOUT

if test $? != 0 ; then
	echo "Comparison failed"
	exit 1
fi

echo ">>>>> Test succeeded"
exit 0
