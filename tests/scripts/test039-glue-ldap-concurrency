#!/bin/bash
## $ReOpenLDAP$
## Copyright 1998-2018 ReOpenLDAP AUTHORS: please see AUTHORS file.
## All rights reserved.
##
## This file is part of ReOpenLDAP.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted only as authorized by the OpenLDAP
## Public License.
##
## A copy of this license is available in the file LICENSE in the
## top-level directory of the distribution or, alternatively, at
## <http://www.OpenLDAP.org/license.html>.

echo "running defines.sh"
. ${TOP_SRCDIR}/tests/scripts/defines.sh

echo ""

if test ${AC_conf[ldap]} = no ; then
	echo "ldap backend not available, test skipped"
	exit 0
fi

if test ${AC_conf[rwm]} = no ; then
	echo "rwm (rewrite/remap) overlay not available, test skipped"
	exit 0
fi

if [ -z "$TESTLOOPS" ]; then
	if [ -n "$CI" ]; then
		TESTLOOPS=12
	else
		TESTLOOPS=50
	fi
fi

if [ -z "$TESTOLOOPS" ]; then
	if [ -n "$CI" ]; then
		TESTOLOOPS=1
	else
		TESTOLOOPS=3
	fi
fi

if [ -z "$TESTCHILDREN" ]; then
	if [ -n "$CI" ]; then
		TESTCHILDREN=12
	else
		TESTCHILDREN=20
	fi
fi

mkdir -p $TESTDIR $DBDIR1 $DBDIR2

echo "Starting slapd on TCP/IP port $PORT1..."
DBNOSYNC=yes config_filter $BACKEND ${AC_conf[monitor]} < $METACONF1 > $CONF1
echo "RUN: $SLAPD_HUGE -f $CONF1 -h $URI1 $TIMING"
$SLAPD_HUGE -f $CONF1 -h $URI1 $TIMING |& gzip > $LOG1.gz &
PID=$(jobs -p | tail -1)
if test $WAIT != 0 ; then
    echo PID $PID
    read foo
fi
KILLPIDS="$PID"
check_running 1 first

echo "Using ldapadd to populate the database..."
$LDAPADD -D "$MANAGERDN" -h $LOCALHOST -p $PORT1 -w $PASSWD < \
	$LDIFORDERED > $TESTOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapadd failed ($RC)!"
	killservers
	exit $RC
fi

echo "Starting slapd on TCP/IP port $PORT2..."
DBNOSYNC=yes config_filter $BACKEND ${AC_conf[monitor]} < $METACONF2 > $CONF2
echo "RUN: $SLAPD_HUGE -f $CONF2 -h $URI2 $TIMING"
$SLAPD_HUGE -f $CONF2 -h $URI2 $TIMING |& gzip > $LOG2.gz &
PID=$(jobs -p | tail -1)
if test $WAIT != 0 ; then
    echo PID $PID
    read foo
fi
KILLPIDS="$KILLPIDS $PID"
check_running 2 second

echo "Using ldapadd to populate the database..."
$LDAPADD -D "$METAMANAGERDN" -h $LOCALHOST -p $PORT2 -w $PASSWD < \
	$LDIFMETA >> $TESTOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapadd failed ($RC)!"
	killservers
	exit $RC
fi

echo "Starting slapd on TCP/IP port $PORT3..."
DBNOSYNC=yes config_filter $BACKEND ${AC_conf[monitor]} < $GLUELDAPCONF > $CONF3
echo "RUN: $SLAPD_HUGE -f $CONF3 -h $URI3 $TIMING"
$SLAPD_HUGE -f $CONF3 -h $URI3 $TIMING |& gzip > $LOG3.gz &
PID=$(jobs -p | tail -1)
if test $WAIT != 0 ; then
    echo PID $PID
    read foo
fi
KILLPIDS="$KILLPIDS $PID"
check_running 3 thrid

cat /dev/null > $SEARCHOUT

mkdir -p $TESTDIR/tmpdata
METABASEDN="o=Example,c=US"
for f in $DATADIR/do_* ; do
	sed -e "s;$BASEDN;$METABASEDN;" $f > $TESTDIR/tmpdata/$(basename $f)
done

# add a read that matches only the local database, but selects
# also the remote as candidate; this should be removed to compare
# execution times with test008...
for f in $TESTDIR/tmpdata/do_read.* ; do
	echo "ou=Meta,$METABASEDN" >> $f
done

# add a read that matches a referral in the local database only,
# but selects also the remote as candidate; this should be removed
# to compare execution times with test008...
for f in $TESTDIR/tmpdata/do_read.* ; do
	echo "cn=Somewhere,ou=Meta,$METABASEDN" >> $f
done

# add a bind that resolves to a referral
for f in $TESTDIR/tmpdata/do_bind.* ; do
	echo "cn=Foo,ou=Meta,$METABASEDN" >> $f
	echo "bar" >> $f
	echo "" >> $f
	echo "" >> $f
done

# fix test data to include back-monitor, if available
# NOTE: copies do_* files from $TESTDIR/tmpdata to $TESTDIR
monitor_data "$TESTDIR/tmpdata" "$TESTDIR"

echo "Using tester for concurrent server access..."
BINDDN="cn=Manager,o=Local"
PASSWD="secret"
$SLAPDTESTER -P "$PROGDIR" -d "$TESTDIR" -h $LOCALHOST -p $PORT3 \
	-D "$BINDDN" -w $PASSWD \
	-l $TESTLOOPS -L $TESTOLOOPS -j $TESTCHILDREN -r 20 \
	-i '!REFERRAL' -i '*INVALID_CREDENTIALS' -SS
RC=$?

if test $RC != 0 ; then
	echo "slapd-tester failed ($RC)!"
	killservers
	exit $RC
fi

echo "Delay $SLEEP0 seconds to handle previous and closed connection(s)..."
sleep $SLEEP0

echo "Using ldapsearch to retrieve all the entries..."
$LDAPSEARCH -S "" -b "$METABASEDN" -h $LOCALHOST -p $PORT3 \
			'(objectClass=*)' > $SEARCHOUT 2>&1
RC=$?

killservers

if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	exit $RC
fi

echo "Filtering ldapsearch results..."
$LDIFFILTER < $SEARCHOUT > $SEARCHFLT
echo "Filtering original ldif used to create database..."
$LDIFFILTER < $METACONCURRENCYOUT > $LDIFFLT
echo "Comparing filter output..."
$CMP $SEARCHFLT $LDIFFLT > $CMPOUT

if test $? != 0 ; then
	echo "comparison failed - slapd-ldap search/modification didn't succeed"
	exit 1
fi

echo ">>>>> Test succeeded"
exit 0
