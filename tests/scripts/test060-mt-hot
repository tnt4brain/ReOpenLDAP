#!/bin/bash
## $ReOpenLDAP$
## Copyright 1998-2018 ReOpenLDAP AUTHORS: please see AUTHORS file.
## All rights reserved.
##
## This file is part of ReOpenLDAP.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted only as authorized by the OpenLDAP
## Public License.
##
## A copy of this license is available in the file LICENSE in the
## top-level directory of the distribution or, alternatively, at
## <http://www.OpenLDAP.org/license.html>.

# The default debug level logs more than 1Gb:
SLAPD_DEBUG=${SLAPD_DEBUG_MT_HOT-stats}

echo "running defines.sh"
. ${TOP_SRCDIR}/tests/scripts/defines.sh

if test ${AC_conf[monitor]} = "no" ; then
	echo "Monitor backend not available, test skipped"
	exit 0
fi

if [ -z "$TESTLOOPS" ]; then
	if [ -n "$CI" ]; then
		TESTLOOPS=12
	else
		TESTLOOPS=50
	fi
fi

mkdir -p $TESTDIR $DBDIR1

#
# Populate and start up slapd server with some random data
#

echo "Running slapadd to build slapd database..."
config_filter $BACKEND ${AC_conf[monitor]} < $MCONF > $ADDCONF
$SLAPADD -f $ADDCONF -l $LDIFORDERED
RC=$?
if test $RC != 0 ; then
	echo "slapadd failed ($RC)!"
	exit $RC
fi

echo "Running slapindex to index slapd database..."
DBNOSYNC=yes config_filter $BACKEND ${AC_conf[monitor]} < $CONF > $CONF1
$SLAPINDEX -f $CONF1
RC=$?
if test $RC != 0 ; then
	echo "warning: slapindex failed ($RC)"
	echo "  assuming no indexing support"
fi

echo "Starting slapd on TCP/IP port $PORT1..."
echo "RUN: $SLAPD_HUGE -f $CONF1 -h $URI1 $TIMING |& gzip > $LOG1.gz &"
$SLAPD_HUGE -f $CONF1 -h $URI1 $TIMING |& gzip > $LOG1.gz &
PID=$(jobs -p | tail -1)
if test $WAIT != 0 ; then
    echo PID $PID
    read foo
fi
KILLPIDS="$PID"
check_running 1

cat /dev/null > $MTREADOUT

echo "Monitor searches"
# Perform a basic single threaded search on a single connection
THR=1
OUTER=1
INNER=`expr $TESTLOOPS \* 1000`
echo "Testing basic mt-hot search: $THR threads ($OUTER x $INNER) loops..."
echo $SLAPDMTREAD -H $URI1 -D "$MANAGERDN" -w $PASSWD \
	-e "$MONITORDN" \
	-m $THR -L $OUTER -l $INNER
$SLAPDMTREAD -H $URI1 -D "$MANAGERDN" -w $PASSWD \
	-e "$MONITORDN" -f "(objectclass=*)" \
	-m $THR -L $OUTER -l $INNER >> $MTREADOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "slapd-mtread failed ($RC)!"
	killservers
	exit $RC
fi

# Perform a basic multi-threaded search on a single connection
THR=5
OUTER=1
INNER=`expr $TESTLOOPS \* 200`
echo "Testing basic mt-hot search: $THR threads ($OUTER x $INNER) loops..."
echo $SLAPDMTREAD -H $URI1 -D "$MANAGERDN" -w $PASSWD \
	-e "$MONITORDN" \
	-m $THR -L $OUTER -l $INNER
$SLAPDMTREAD -H $URI1 -D "$MANAGERDN" -w $PASSWD \
	-e "$MONITORDN" -f "(objectclass=*)" \
	-m $THR -L $OUTER -l $INNER >> $MTREADOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "slapd-mtread failed ($RC)!"
	killservers
	exit $RC
fi

# Perform a basic multi-threaded search on a single connection
THR=100
OUTER=5
INNER=`expr $TESTLOOPS \* 2`
echo "Testing basic mt-hot search: $THR threads ($OUTER x $INNER) loops..."
echo $SLAPDMTREAD -H $URI1 -D "$MANAGERDN" -w $PASSWD \
	-e "$MONITORDN" \
	-m $THR -L $OUTER -l $INNER
$SLAPDMTREAD -H $URI1 -D "$MANAGERDN" -w $PASSWD \
	-e "$MONITORDN" -f "(objectclass=*)" \
	-m $THR -L $OUTER -l $INNER >> $MTREADOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "slapd-mtread failed ($RC)!"
	killservers
	exit $RC
fi

# Perform a single threaded random DB search on a single connection
echo "Random searches"
THR=1
OUTER=1
INNER=`expr $TESTLOOPS \* 1000`
echo "Testing random mt-hot search: $THR threads ($OUTER x $INNER) loops..."
echo $SLAPDMTREAD -H $URI1 -D "$MANAGERDN" -w $PASSWD \
	-e "$BASEDN" -f "(objectclass=*)" \
	-m $THR -L $OUTER -l $INNER
$SLAPDMTREAD -H $URI1 -D "$MANAGERDN" -w $PASSWD \
	-e "$BASEDN" -f "(objectclass=*)" \
	-m $THR -L $OUTER -l $INNER >> $MTREADOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "slapd-mtread failed ($RC)!"
	killservers
	exit $RC
fi

# Perform a multi-threaded random DB search on a single connection
THR=5
OUTER=1
INNER=`expr $TESTLOOPS \* 200`
echo "Testing random mt-hot search: $THR threads ($OUTER x $INNER) loops..."
echo $SLAPDMTREAD -H $URI1 -D "$MANAGERDN" -w $PASSWD \
	-e "$BASEDN" -f "(objectclass=*)" \
	-m $THR -L $OUTER -l $INNER
$SLAPDMTREAD -H $URI1 -D "$MANAGERDN" -w $PASSWD \
	-e "$BASEDN" -f "(objectclass=*)" \
	-m $THR -L $OUTER -l $INNER >> $MTREADOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "slapd-mtread failed ($RC)!"
	killservers
	exit $RC
fi

# Perform a multi-threaded random DB search on a single connection
THR=100
OUTER=5
INNER=`expr $TESTLOOPS \* 2`
echo "Testing random mt-hot search: $THR threads ($OUTER x $INNER) loops..."
echo $SLAPDMTREAD -H $URI1 -D "$MANAGERDN" -w $PASSWD \
	-e "$BASEDN" -f "(objectclass=*)" \
	-m $THR -L $OUTER -l $INNER
$SLAPDMTREAD -H $URI1 -D "$MANAGERDN" -w $PASSWD \
	-e "$BASEDN" -f "(objectclass=*)" \
	-m $THR -L $OUTER -l $INNER >> $MTREADOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "slapd-mtread failed ($RC)!"
	killservers
	exit $RC
fi

# Perform a basic multi-threaded search using multiple connections
echo "Multiple threads and connection searches"
CONN=5
THR=5
OUTER=1
INNER=`expr $TESTLOOPS \* 200`
echo "Testing basic mt-hot search: $THR threads $CONN conns ($OUTER x $INNER) loops..."
echo $SLAPDMTREAD -H $URI1 -D "$MANAGERDN" -w $PASSWD \
	-e "$MONITORDN" \
	-c $CONN -m $THR -L $OUTER -l $INNER
$SLAPDMTREAD -H $URI1 -D "$MANAGERDN" -w $PASSWD \
	-e "$MONITORDN" -f "(objectclass=*)" \
	-c $CONN -m $THR -L $OUTER -l $INNER >> $MTREADOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "slapd-mtread failed ($RC)!"
	killservers
	exit $RC
fi

# Perform a basic multi-threaded search using multiple connections
CONN=5
THR=50
OUTER=5
INNER=`expr $TESTLOOPS \* 20`
echo "Testing basic mt-hot search: $THR threads $CONN conns ($OUTER x $INNER) loops..."
echo $SLAPDMTREAD -H $URI1 -D "$MANAGERDN" -w $PASSWD \
	-e "$MONITORDN" \
	-c $CONN -m $THR -L $OUTER -l $INNER
$SLAPDMTREAD -H $URI1 -D "$MANAGERDN" -w $PASSWD \
	-e "$MONITORDN" -f "(objectclass=*)" \
	-c $CONN -m $THR -L $OUTER -l $INNER >> $MTREADOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "slapd-mtread failed ($RC)!"
	killservers
	exit $RC
fi

# Perform a multi-threaded random DB search using multiple connections
CONN=5
THR=100
OUTER=5
INNER=`expr $TESTLOOPS \* 2`
echo "Testing random mt-hot search: $THR threads $CONN conns ($OUTER x $INNER) loops..."
echo $SLAPDMTREAD -H $URI1 -D "$MANAGERDN" -w $PASSWD \
	-e "$BASEDN" -f "(objectclass=*)" \
	-c $CONN -m $THR -L $OUTER -l $INNER
$SLAPDMTREAD -H $URI1 -D "$MANAGERDN" -w $PASSWD \
	-e "$BASEDN" -f "(objectclass=*)" \
	-c $CONN -m $THR -L $OUTER -l $INNER >> $MTREADOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "slapd-mtread failed ($RC)!"
	killservers
	exit $RC
fi

# Perform a multi-threaded random reads and writes using single connection
CONN=1
THR=10
WTHR=10
OUTER=5
INNER=`expr $TESTLOOPS \* 2`
echo "Testing random mt-hot r/w search: $THR read threads $WTHR write threads $CONN conns ($OUTER x $INNER) loops..."
echo $SLAPDMTREAD -H $URI1 -D "$MANAGERDN" -w $PASSWD \
	-e "$BASEDN" -f "(&(!(cn=rwtest*))(objectclass=*))" \
	-c $CONN -m $THR -M $WTHR -L $OUTER -l $INNER
$SLAPDMTREAD -H $URI1 -D "$MANAGERDN" -w $PASSWD \
	-e "$BASEDN" -f "(&(!(cn=rwtest*))(objectclass=*))" \
	-c $CONN -m $THR -M $WTHR -L $OUTER -l $INNER >> $MTREADOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "slapd-mtread failed ($RC)!"
	killservers
	exit $RC
fi

# Perform a multi-threaded random reads and writes using multiple connections
CONN=5
THR=10
WTHR=10
OUTER=5
INNER=`expr $TESTLOOPS \* 2`
echo "Testing random mt-hot r/w search: $THR read threads $WTHR write threads $CONN conns ($OUTER x $INNER) loops..."
echo $SLAPDMTREAD -H $URI1 -D "$MANAGERDN" -w $PASSWD \
	-e "$BASEDN" -f "(&(!(cn=rwtest*))(objectclass=*))" \
	-c $CONN -m $THR -M $WTHR -L $OUTER -l $INNER
$SLAPDMTREAD -H $URI1 -D "$MANAGERDN" -w $PASSWD \
	-e "$BASEDN" -f "(&(!(cn=rwtest*))(objectclass=*))" \
	-c $CONN -m $THR -M $WTHR -L $OUTER -l $INNER >> $MTREADOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "slapd-mtread failed ($RC)!"
	killservers
	exit $RC
fi


killservers

echo ">>>>> Test succeeded"

exit 0
