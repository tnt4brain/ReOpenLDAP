#!/bin/bash
## $ReOpenLDAP$
## Copyright 2004-2018 ReOpenLDAP AUTHORS: please see AUTHORS file.
## All rights reserved.
##
## This file is part of ReOpenLDAP.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted only as authorized by the OpenLDAP
## Public License.
##
## A copy of this license is available in the file LICENSE in the
## top-level directory of the distribution or, alternatively, at
## <http://www.OpenLDAP.org/license.html>.

echo "running defines.sh"
. ${TOP_SRCDIR}/tests/scripts/defines.sh

if test ${AC_conf[refint]} = no; then
	echo "Referential Integrity overlay not available, test skipped"
	exit 0
fi

mkdir -p $TESTDIR $DBDIR1

echo "Running slapadd to build slapd database..."
config_filter $BACKEND ${AC_conf[monitor]} < $REFINTCONF > $CONF1
$SLAPADD -f $CONF1 -l $LDIFREFINT
RC=$?
if test $RC != 0 ; then
	echo "slapadd failed ($RC)!"
	exit $RC
fi

echo "Starting slapd on TCP/IP port $PORT1..."
$SLAPD -f $CONF1 -h $URI1 $TIMING > $LOG1 2>&1 &
PID=$!
if test $WAIT != 0 ; then
    echo PID $PID
    read foo
fi
KILLPIDS="$PID"
echo "Testing slapd referential integrity operations..."
check_running 1

echo "Searching unmodified database..."

$LDAPSEARCH -S "" -b "o=refint" -h $LOCALHOST -p $PORT1 > $SEARCHOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapsearch failed ($RC)!"
	killservers
	exit $RC
fi

$EGREP_CMD "(manager|secretary):" $SEARCHOUT | sed "s/george/foster/g" | \
	sort > $TESTOUT 2>&1

echo "Testing modrdn..."
$LDAPMODRDN -D "$REFINTDN" -r -h $LOCALHOST -p $PORT1 -w $PASSWD > \
	/dev/null 2>&1 'uid=george,ou=users,o=refint' 'uid=foster'
#$LDAPMODRDN -D "$REFINTDN" -r -h $LOCALHOST -p $PORT1 -w $PASSWD  \
#	'uid=george,ou=users,o=refint' 'uid=foster'

RC=$?
if test $RC != 0 ; then
	echo "ldapmodrdn failed ($RC)!"
	killservers
	exit $RC
fi

prefix=
for i in $SLEEP0 $SLEEP0 $SLEEP1 $SLEEP1 $SLEEP1; do
	echo "${prefix}Sleep $i"
	sleep $i
	echo "${prefix}Using ldapsearch to check dependents new rdn..."

	$LDAPSEARCH -S "" -b "o=refint" -h $LOCALHOST -p $PORT1 > $SEARCHOUT 2>&1

	RC=$?
		if test $RC != 0 ; then
		echo "ldapsearch failed ($RC)!"
		killservers
		exit $RC
	fi

	$EGREP_CMD "(manager|secretary):" $SEARCHOUT | sort > $SEARCHFLT 2>&1

	echo "${prefix}Comparing ldapsearch results against original..."
	$CMP $TESTOUT $SEARCHFLT > $CMPOUT
	RC=$?
	if [ $RC = 0 ]; then
		break;
	fi
	prefix="Retry, "
done
if test $RC != 0 ; then
	echo "comparison failed - modify operations did not complete correctly"
	killservers
	exit 1
fi

echo "Testing delete..."
$LDAPMODIFY -v -D "$REFINTDN" -h $LOCALHOST -p $PORT1 -w $PASSWD > \
	$TESTOUT 2>&1 << EDEL
version: 1
dn: uid=foster,ou=users,o=refint
changetype: delete
EDEL

RC=$?
if test $RC != 0 ; then
	echo "ldapmodify failed ($RC)!"
	killservers
	exit $RC
fi

prefix=
for i in $SLEEP0 $SLEEP0 $SLEEP1 $SLEEP1 $SLEEP1; do
	echo "${prefix}Sleep $i"
	sleep $i
	echo "${prefix}Using ldapsearch to verify dependents have been deleted..."
	$LDAPSEARCH -S "" -b "o=refint" -h $LOCALHOST -p $PORT1 > $SEARCHOUT 2>&1

	RC=$?
	if test $RC != 0 ; then
		echo "ldapsearch failed ($RC)!"
		killservers
		exit $RC
	fi

	$EGREP_CMD "(manager|secretary):" $SEARCHOUT > $SEARCHFLT 2>&1

	RC=`grep -c foster $SEARCHFLT`
	if [ $RC = 0 ]; then
		break
	fi
	prefix="Retry, "
done
if test $RC != 0 ; then
	echo "dependent modify failed - dependents were not deleted"
	killservers
	exit 1
fi

echo "Additional test records..."

$LDAPADD -D "$REFINTDN" -h $LOCALHOST -p $PORT1 -w $PASSWD > \
	$TESTOUT 2>&1 << ETEST
dn: uid=special,ou=users,o=refint
objectClass: inetOrgPerson
objectClass: extensibleObject
uid: special
sn: special
cn: special
businessCategory: nothing
carLicense: FOO
departmentNumber: 933
displayName: special
employeeNumber: 41491
employeeType: vendor
givenName: special
member: uid=alice,ou=users,o=refint
ETEST

RC=$?
if test $RC != 0 ; then
	echo "ldapadd failed ($RC)!"
	killservers
	exit $RC
fi

echo "Testing delete when referential attribute is a MUST..."
$LDAPMODIFY -v -D "$REFINTDN" -h $LOCALHOST -p $PORT1 -w $PASSWD > \
	$TESTOUT 2>&1 << EDEL
version: 1
dn: uid=alice,ou=users,o=refint
changetype: delete
EDEL

RC=$?
if test $RC != 0 ; then
	echo "ldapmodify failed ($RC)!"
	killservers
	exit $RC
fi

if test $BACKEND = "bdb" ; then
	echo "Skip the rest for $BACKEND"
else
	$LDAPSEARCH -S "" -b "o=refint" -h $LOCALHOST -p $PORT1 \
		manager member secretary > ${SEARCHOUT}-0 2>&1

	$LDAPMODIFY -v -D "$REFINTDN" -h $LOCALHOST -p $PORT1 -w $PASSWD > \
		$TESTOUT 2>&1 << EDEL
version: 1
dn: cn=group,o=refint
changetype: add
objectClass: groupOfNames
cn: group
member: uid=bill,ou=users,o=refint
member: uid=bob,ou=users,o=refint
member: uid=dave,ou=users,o=refint
member: uid=jorge,ou=users,o=refint
member: uid=theman,ou=users,o=refint
member: uid=richard,ou=users,o=refint
EDEL

	RC=$?
	if test $RC != 0 ; then
		echo "ldapmodify failed ($RC)!"
		killservers
		exit $RC
	fi

	prefix=
	for i in $SLEEP0 $SLEEP0 $SLEEP1 $SLEEP1 $SLEEP1; do
		echo "${prefix}Sleep $i"
		sleep $i

		echo "${prefix}Using ldapsearch to verify dependents have been updated..."
		$LDAPSEARCH -S "" -b "o=refint" -h $LOCALHOST -p $PORT1 \
			manager member secretary > $SEARCHOUT 2>&1
		RC=$?
		if test $RC != 0 ; then
			echo "ldapsearch failed ($RC)!"
			killservers
			exit $RC
		fi

		$EGREP_CMD "(manager|member|secretary):" $SEARCHOUT \
			| sed "s/ou=users/ou=people/g" | \
			sort > $TESTOUT 2>&1

		RC=`cut -d ':' -f 1 $TESTOUT | sort -u | wc -l`
		if [ $RC = 2 ]; then
			break
		fi
		prefix="Retry, "
	done
	if [ $RC != 2 ]; then
		echo "dependent modify failed - dependents were not updated"
		killservers
		exit 1
	fi

	echo "testing subtree rename"
	$LDAPMODRDN -D "$REFINTDN" -r -h $LOCALHOST -p $PORT1 -w $PASSWD > \
		/dev/null 2>&1 'ou=users,o=refint' 'ou=people'
	RC=$?
	if test $RC != 0 ; then
		echo "ldapmodrdn failed ($RC)!"
		killservers
		exit $RC
	fi

	prefix=
	for i in $SLEEP0 $SLEEP0 $SLEEP1 $SLEEP1 $SLEEP1; do
		echo "${prefix}Sleep $i"
		sleep $i

		echo "${prefix}Using ldapsearch to check dependents new rdn..."
		$LDAPSEARCH -S "" -b "o=refint" -h $LOCALHOST -p $PORT1 \
			manager member secretary > $SEARCHOUT 2>&1

		RC=$?
		if test $RC != 0 ; then
			echo "ldapsearch failed ($RC)!"
			killservers
			exit $RC
		fi

		$EGREP_CMD "(manager|member|secretary):" $SEARCHOUT \
			| sort > $SEARCHFLT 2>&1

		echo "${prefix}Comparing ldapsearch results against original..."
		$CMP ${TESTOUT} $SEARCHFLT > $CMPOUT
		RC=$?
		if [ $RC = 0 ]; then
			break
		fi
		prefix="Retry, "
	done
	if [ $RC != 0 ]; then
		echo "comparison failed - subtree rename operations did not complete correctly"
		killservers
		exit 1
	fi
fi

killservers
echo ">>>>> Test succeeded"
exit 0
