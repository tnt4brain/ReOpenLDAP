#!/bin/bash
## $ReOpenLDAP$
## Copyright 1998-2018 ReOpenLDAP AUTHORS: please see AUTHORS file.
## All rights reserved.
##
## This file is part of ReOpenLDAP.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted only as authorized by the OpenLDAP
## Public License.
##
## A copy of this license is available in the file LICENSE in the
## top-level directory of the distribution or, alternatively, at
## <http://www.OpenLDAP.org/license.html>.

echo "running defines.sh"
. ${TOP_SRCDIR}/tests/scripts/defines.sh

if test ${AC_conf[tls]} = no ; then
        echo "TLS support not available, test skipped"
        exit 0
fi
if $LDAPSEARCH -o tls_cacert=$TESTDIR/tls/ca/certs/testsuiteCA.crt -o tls_reqcert=hard -H "ldaps://0.0.0.0" 2<&1 | grep -i -q  "Invalid general option name"
then
    echo "ldap-client tools don't support TLS options, test skipped"
    echo "HINT: use ldap-client tools from the next/devel version of ReOpenLDAP"
    echo "      LDAP_CLIENTDIR=<MODERN_VERSION_INSTALL_PREFIX>/bin make test"
    exit 0
fi

mkdir -p $TESTDIR $DBDIR1
cp -r $DATADIR/tls $TESTDIR

cd $TESTWD

echo "Starting ldap:/// slapd on TCP/IP port $PORT1 and ldaps:/// slapd on $PORT2..."
config_filter $BACKEND ${AC_conf[monitor]} < $TLSCONF > $CONF1
$SLAPD -f $CONF1 -h "$URI1 $SURI2" -d $LVL $TIMING > $LOG1 2>&1 &
PID=$!
if test $WAIT != 0 ; then
    echo PID $PID
    read foo
fi
KILLPIDS="$PID"
check_running 1

echo -n "Using ldapsearch with startTLS with no server cert validation...."
$LDAPSEARCH -o tls_reqcert=never -ZZ -b "" -s base -H $URIP1 \
	'@extensibleObject' > $SEARCHOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapsearch (startTLS) failed ($RC)!"
	killservers
	exit $RC
else
	echo "success"
fi

echo -n "Using ldapsearch with startTLS with hard require cert...."
$LDAPSEARCH -o tls_cacert=$TESTDIR/tls/ca/certs/testsuiteCA.crt -o tls_reqcert=hard -ZZ -b "" -s base -H $URIP1 \
	'@extensibleObject' > $SEARCHOUT 2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapsearch (startTLS) failed ($RC)!"
	killservers
	exit $RC
else
	echo "success"
fi

if test ${AC_conf[tls]} = openssl ; then
	echo -n "Using ldapsearch with startTLS and specific protocol version...."
	$LDAPSEARCH -o tls_cacert=$TESTDIR/tls/ca/certs/testsuiteCA.crt -o tls_reqcert=hard -o tls_protocol_min=3.3 -ZZ -b "" -s base -H $URIP1 \
		'@extensibleObject' > $SEARCHOUT 2>&1
	RC=$?
	if test $RC != 0 ; then
		echo "ldapsearch (protocol-min) failed ($RC)!"
		killservers
		exit $RC
	else
		echo "success"
	fi
fi

echo -n "Using ldapsearch on $SURI2 with no server cert validation..."
$LDAPSEARCH -o tls_reqcert=never -b "cn=Subschema" -s base -H $SURIP2 \
	'(&(objectClasses=top)(objectClasses=2.5.6.0))' cn objectClass \
	>> $SEARCHOUT  2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapsearch (ldaps) failed($RC)!"
	killservers
	exit $RC
else
	echo "success"
fi

echo -n "Using ldapsearch on $SURI2 with reqcert HARD and no CA cert.  Should fail..."
$LDAPSEARCH -o tls_reqcert=hard -b "cn=Subschema" -s base -H $SURIP2 \
	'(&(objectClasses=top)(objectClasses=2.5.6.0))' cn objectClass \
	>> $SEARCHOUT  2>&1
RC=$?
if test $RC = 0 ; then
	echo "ldapsearch (ldaps) succeeded when it should have failed($RC)!"
	killservers
	exit 1
else
	echo "failed correctly with error code ($RC)"
fi

echo -n "Using ldapsearch on $SURI2 with CA cert and reqcert HARD..."
$LDAPSEARCH -o tls_cacert=$TESTDIR/tls/ca/certs/testsuiteCA.crt -o tls_reqcert=hard -b "cn=Subschema" -s base -H $SURIP2 \
	'(&(objectClasses=top)(objectClasses=2.5.6.0))' cn objectClass \
	>> $SEARCHOUT  2>&1
RC=$?
if test $RC != 0 ; then
	echo "ldapsearch (ldaps) failed ($RC)!"
	killservers
	exit $RC
else
	echo "success"
fi

killservers
echo ">>>>> Test succeeded"
exit 0
